import{_ as t,M as e,p as o,q as c,R as s,t as n,N as i,a1 as a}from"./framework-b7c41258.js";const l="/zhaobao1830-notes/assets/01-899a3c88.png",u="/zhaobao1830-notes/assets/02-70ac42e2.png",r="/zhaobao1830-notes/assets/03-a7e6e3ce.png",d="/zhaobao1830-notes/assets/04-0286505b.png",k="/zhaobao1830-notes/assets/05-0232a6cb.png",m="/zhaobao1830-notes/assets/06-c800bfc0.png",v="/zhaobao1830-notes/assets/07-c06f4179.png",b="/zhaobao1830-notes/assets/12-338e2648.png",g="/zhaobao1830-notes/assets/08-62267d1d.png",y="/zhaobao1830-notes/assets/09-df9b6e8b.png",h="/zhaobao1830-notes/assets/10-904818bc.png",w="/zhaobao1830-notes/assets/11-d8f8cec6.png",f="/zhaobao1830-notes/assets/13-a00da242.png",S="/zhaobao1830-notes/assets/14-b3a68df1.png",I="/zhaobao1830-notes/assets/15-58cd57ec.png",C="/zhaobao1830-notes/assets/16-82c74e1e.png",q="/zhaobao1830-notes/assets/17-a757f8e9.png",x="/zhaobao1830-notes/assets/18-ed3ba067.png",_="/zhaobao1830-notes/assets/19-2fe4c8d1.png",j="/zhaobao1830-notes/assets/20-5c47c9fe.png",B="/zhaobao1830-notes/assets/21-666b952b.png",A="/zhaobao1830-notes/assets/22-7eb442e8.png",E="/zhaobao1830-notes/assets/28-d495a467.png",D="/zhaobao1830-notes/assets/23-75247948.png",R="/zhaobao1830-notes/assets/24-f6520c6c.png",z="/zhaobao1830-notes/assets/25-812a9ff9.png",O="/zhaobao1830-notes/assets/26-5057979e.png",H="/zhaobao1830-notes/assets/27-61dc7857.png",P="/zhaobao1830-notes/assets/29-48995285.png",M="/zhaobao1830-notes/assets/30-8dedb7fa.png",Q={},W=a('<h1 id="java知识点" tabindex="-1"><a class="header-anchor" href="#java知识点" aria-hidden="true">#</a> Java知识点</h1><h2 id="java-web框架的发展历史" tabindex="-1"><a class="header-anchor" href="#java-web框架的发展历史" aria-hidden="true">#</a> java web框架的发展历史</h2><p>1、Servlet+Jsp+JavaBean MVC</p><p>2、struts</p><p>3、Spring：IOC(控制反转)、AOP（面向切面模式）</p><p>4、Hibernate ORM</p><p>5、ssh structs2+spring+hibernate</p><p>6、ssm springmvc+spring+mybatis</p><p>7、Springmvc升级成SpringBoot</p><h2 id="为什么现在用springboot不用springmvc" tabindex="-1"><a class="header-anchor" href="#为什么现在用springboot不用springmvc" aria-hidden="true">#</a> 为什么现在用SpringBoot不用Springmvc？</h2><p>SpringBoot简化了SpringMvc的配置（约定大于配置）</p><h2 id="java为什么很多公司用" tabindex="-1"><a class="header-anchor" href="#java为什么很多公司用" aria-hidden="true">#</a> Java为什么很多公司用？</h2><p>软件工程最重要的是项目的维护和迭代</p><p>动态语言比如js、python想写出可维护的代码难，因为太灵活了</p><p>java、c# 虽然笨重，但是强制你按照某种规则去做，让你写出好的可维护的代码</p><h2 id="ocp-开闭原则" tabindex="-1"><a class="header-anchor" href="#ocp-开闭原则" aria-hidden="true">#</a> OCP（开闭原则）</h2><p>不管是软件，还是函数，还是类，都要对扩展是开放的，对修改是封闭的（这说的代码不能修改，但配置文件可以）。</p><p>当要修改的时候，我们通过新增一业务模块或类，来代替原来的类。</p><h2 id="面向抽象编程" tabindex="-1"><a class="header-anchor" href="#面向抽象编程" aria-hidden="true">#</a> 面向抽象编程</h2><p><strong>面向抽象编程，是为了实现开闭原则，最终目标是为了写出可维护、稳定的代码</strong></p><p>面向抽象编程面临的问题有俩个：</p><ul><li><p>统一方法的调用</p></li><li><p>统一对象的创建</p></li></ul><p>实现面向抽象编程的方法有：</p><ul><li><p>interface</p></li><li><p>设计模式：工厂模式</p></li><li><p>IOC/DI</p></li></ul><p>这三种方法是逐渐递进的，不了解没关系，现在看下面的例子：</p><p><strong>英雄联盟 demo 推导</strong></p><p>由一个小型 demo 项目模拟英雄联盟用户选择英雄释放技能，推导 IOC 与 DI 的实现原理</p><p>将分别列举四个不同的版本演进这个推导过程，达到逐步理解 IOC 和 DI 的目的</p><p><strong>只有一段代码中没有new的出现，才能保证代码的相对稳定，换句话说，一段代码如果要保持稳定，就不应该负责对象的实例化</strong></p><h3 id="第一版-烂大街的代码风格" tabindex="-1"><a class="header-anchor" href="#第一版-烂大街的代码风格" aria-hidden="true">#</a> 第一版：烂大街的代码风格</h3><p><img src="'+l+`" alt="Image text"></p><p>Main1.java</p><p>选择英雄释放技能 main 函数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>awkward<span class="token punctuation">.</span>hero<span class="token punctuation">.</span></span><span class="token class-name">Camille</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>awkward<span class="token punctuation">.</span>hero<span class="token punctuation">.</span></span><span class="token class-name">Diana</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>awkward<span class="token punctuation">.</span>hero<span class="token punctuation">.</span></span><span class="token class-name">Irelia</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main1</span> <span class="token punctuation">{</span>

    <span class="token comment">// 第一版：烂大街的代码风格</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Main1</span><span class="token punctuation">.</span><span class="token function">getPlayerInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;Diana&quot;</span><span class="token operator">:</span>
                <span class="token class-name">Diana</span> diana <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Diana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                diana<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;Irelia&quot;</span><span class="token operator">:</span>
                <span class="token class-name">Irelia</span> irelia <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Irelia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                irelia<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;Camille&quot;</span><span class="token operator">:</span>
                <span class="token class-name">Camille</span> camille <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Camille</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                camille<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 接收玩家的输入（玩家输入英雄名字）
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getPlayerInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a Hero&#39;s Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>英雄类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>awkward<span class="token punctuation">.</span>hero</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 戴安娜
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Diana</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 技能 Q
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Diana Q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 W
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Diana W&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 E
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Diana E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 R
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Diana R&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>awkward<span class="token punctuation">.</span>hero</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 艾瑞莉娅（刀妹）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Irelia</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 技能 Q
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia Q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 W
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia W&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 E
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 R
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia R&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>awkward<span class="token punctuation">.</span>hero</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 卡蜜尔（青钢影）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Camille</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 技能 Q
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Camille Q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 W
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Camille W&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 E
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Camille E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 R
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Camille R&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>评价：</strong> 这版代码太烂，因为main方法里new 类的操作太多，代码不稳定，而且新增英雄的话，需要修改main方法，新增new 类</p><h3 id="第二版-使用interface抽象风格" tabindex="-1"><a class="header-anchor" href="#第二版-使用interface抽象风格" aria-hidden="true">#</a> 第二版：使用interface抽象风格</h3><p><img src="`+u+`" alt="Image text"></p><p>Main2.java</p><p>选择英雄释放技能 main 函数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>abstraction<span class="token punctuation">.</span></span><span class="token class-name">ISkill</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>abstraction<span class="token punctuation">.</span>hero<span class="token punctuation">.</span></span><span class="token class-name">Camille</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>abstraction<span class="token punctuation">.</span>hero<span class="token punctuation">.</span></span><span class="token class-name">Diana</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>abstraction<span class="token punctuation">.</span>hero<span class="token punctuation">.</span></span><span class="token class-name">Irelia</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main2</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 第二版：interface抽象风格
     * 单纯interface可以统一方法的调用，但是它不能统一对象的实例化
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Main2</span><span class="token punctuation">.</span><span class="token function">getPlayerInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ISkill</span> iSkill<span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;Diana&quot;</span><span class="token operator">:</span>
                iSkill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Diana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;Irelia&quot;</span><span class="token operator">:</span>
                iSkill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Irelia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;Camille&quot;</span><span class="token operator">:</span>
                iSkill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Camille</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        iSkill<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 接收玩家的输入（玩家输入英雄名字）
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getPlayerInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a Hero&#39;s Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>英雄技能接口类</p><p>ISkill.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>abstraction</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 技能接口 Q W E R
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISkill</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 技能 Q
     */</span>
    <span class="token keyword">void</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 技能 W
     */</span>
    <span class="token keyword">void</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 技能 E
     */</span>
    <span class="token keyword">void</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 技能 R
     */</span>
    <span class="token keyword">void</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各英雄类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>abstraction<span class="token punctuation">.</span>hero</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>abstraction<span class="token punctuation">.</span></span><span class="token class-name">ISkill</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 戴安娜
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Diana</span> <span class="token keyword">implements</span> <span class="token class-name">ISkill</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 技能 Q
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Diana Q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 W
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Diana W&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 E
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Diana E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 R
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Diana R&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>abstraction<span class="token punctuation">.</span>hero</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>abstraction<span class="token punctuation">.</span></span><span class="token class-name">ISkill</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 艾瑞莉娅（刀妹）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Irelia</span> <span class="token keyword">implements</span> <span class="token class-name">ISkill</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 技能 Q
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia Q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 W
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia W&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 E
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 R
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia R&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>abstraction<span class="token punctuation">.</span>hero</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>abstraction<span class="token punctuation">.</span></span><span class="token class-name">ISkill</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 艾瑞莉娅（刀妹）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Irelia</span> <span class="token keyword">implements</span> <span class="token class-name">ISkill</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 技能 Q
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia Q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 W
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia W&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 E
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 技能 R
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Irelia R&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>评价：</strong> 这版代码将方法进行抽象，统一管理，但不能统一对象的实例化，如果有新的类，那就得在switch里新加new代码，这样会修改之前的主体代码</p><p>方法统一的意义在哪？</p><p>1、某方法被大量调用时很繁琐，方法统一后一行代码搞定；</p><p>2、事项功能的单一性，便于后面的提取封装。</p><h3 id="第三版-工厂模式-分离对象实例化" tabindex="-1"><a class="header-anchor" href="#第三版-工厂模式-分离对象实例化" aria-hidden="true">#</a> 第三版：工厂模式：分离对象实例化</h3><p><img src="`+r+`" alt="Image text"></p><p>Main3.java</p><p>选择英雄释放技能 main 函数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">HeroFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">ISkill</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main3</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 第三版：工厂模式分离对象实例化
     * 把对象实例化的过程，转移到其他的代码片段里
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Main3</span><span class="token punctuation">.</span><span class="token function">getPlayerInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ISkill</span> iSkill <span class="token operator">=</span> <span class="token class-name">HeroFactory</span><span class="token punctuation">.</span><span class="token function">getHero</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        iSkill<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 接收玩家的输入（玩家输入英雄名字）
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getPlayerInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a Hero&#39;s Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HeroFactory.java</p><p>生产英雄的工厂类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>hero<span class="token punctuation">.</span></span><span class="token class-name">Camille</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>hero<span class="token punctuation">.</span></span><span class="token class-name">Diana</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>hero<span class="token punctuation">.</span></span><span class="token class-name">Irelia</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 简单工厂模式
 * 生产或实例化英雄类，把对象实例化的过程隔离
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ISkill</span> <span class="token function">getHero</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ISkill</span> iSkill<span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;Diana&quot;</span><span class="token operator">:</span>
                iSkill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Diana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;Irelia&quot;</span><span class="token operator">:</span>
                iSkill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Irelia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;Camille&quot;</span><span class="token operator">:</span>
                iSkill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Camille</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> iSkill<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ISkill 接口、Diana、Irelia、Camille 类与第二版基本相同</p><p><strong>评价：</strong> 基本上实现了方法和对象实例化的统一</p><h3 id="第四版-反射" tabindex="-1"><a class="header-anchor" href="#第四版-反射" aria-hidden="true">#</a> 第四版：反射</h3><p><img src="`+d+`" alt="Image text"></p><p>HeroFactory.java</p><p>英雄工厂类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>lol<span class="token punctuation">.</span>reflect</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 简单工厂模式
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroFactory</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 第四版：通过反射机制消除所有的变化
     * 正向思维：工厂模式 + 反射并不是 IOC 和 DI
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ISkill</span> <span class="token function">getHero</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 元类、反射</span>
        <span class="token comment">// 对象 类 元类</span>
        <span class="token class-name">String</span> classStr <span class="token operator">=</span> <span class="token string">&quot;com.moon.lol.reflect.hero.&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cla <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> obj <span class="token operator">=</span> cla<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ISkill</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Main 类与第三版基本相同</p><p>ISkill 接口、Diana、Irelia、Camille 类与第二版基本相同</p><p><strong>评价：</strong> 这一版每一次调用都需要重新反射生成对象，性能不好；而spring是可以把生成的对象加到缓存里面，就不再重复生成；</p><p>IOC就是利用反射实现的，但反射+工厂模式不是IOC和DI</p><p><strong>上面四版代码的总结</strong></p><ul><li><p>单纯 interface 可以统一方法的调用，但是它不能统一对象的实例化</p></li><li><p>面向对象主要做两件事情：实例化对象 调用方法（完成业务逻辑）</p></li><li><p>只有一段代码中没有 new 的出现，才能保持代码的相对稳定，才能逐步实现 OCP</p></li><li><p>上面的这句话只是表象，实质是一段代码如果要保持稳定，就不应该负责对象的实例化</p></li><li><p>对象实例化是不可能消除的</p></li><li><p>把对象实例化的过程，转移到其他的代码片段里</p></li><li><p>代码中总是会存在不稳定，隔离这些不稳定，保证其他的代码是稳定的</p></li><li><p>变化造成了不稳定</p></li><li><p>配置文件属于系统外部的，可以理解为用户的输入，变化是无法消除的，所以把变化放到配置文件里</p></li></ul><p><strong>问题</strong></p><p>上面第四版已经实现开闭原则了，但还是有缺点，需要调用HeroFactory的方法，那有没有一种机制，可以不需要调用HeroFactory创建iSkill，只要文件里引入iSkill就可以直接使用</p><p>现在就可以该最佳解决方法出现了：IOC和DI</p><p>在IOC和DI出现前很长一段时间，我们都是用工厂模式实现的开闭原则</p><p><img src="`+k+'" alt="Image text"></p><p>这种写法最大的问题就是类与类之间的依赖性高，当类A使用类C中的方法，必须在类A中new 类C，如果new 类C的地方出现变化，那需要更改的地方太多</p><p>现在就有一个方法：代码里面不使用new生成对象，有一个容器将C这个对象给我们使用</p><p>对比：以前是我们自己new一个类生成对象，现在是容器直接给我们这个对象</p><h3 id="ioc和di" tabindex="-1"><a class="header-anchor" href="#ioc和di" aria-hidden="true">#</a> IOC和DI</h3><p>IOC：控制反转</p><p>DI：依赖注入</p><p><strong>从DI的角度理解IOC：</strong></p><p>此处有两个类 A 与 B ，A类要使用B类的中的方法，则在A中实例化B，而后调用B中方法，依赖程度高，后期修改部分多。</p><p>将B抽象成一个接口，A只调用接口中的方法，B实现接口的方法。在A中对接口初始化，但是本质上也是对B类的初始化，不稳定。</p><p>因此A将控制B的权利转移给另外一个容器，容器将接口实例化后注入到A中，实例化的接口(即继承接口的类)可以是B，也可以是其他类，容器起到资源调配的作用。</p><p>A只关心接口中的方法，至于实例化的是哪一个类，A并不关心，只要接口方法不变，A调用的方法就不变，从而保持A中的代码稳定，降低A对B的依赖。</p><p>这体现了IOC</p><p><strong>IOC反转的是控制权的反转</strong></p><p>程序员负责实现各种类，但如何使用，就交给用户（指产品经理或者项目负责人，决定用什么数据库）</p><p>以数据库为例，现在有mysql、oragle、mogodb三种数据库</p><p>程序员把这三种数据库需要的类都写好，但用哪个数据库的控制权交给用户</p><p><strong>IOC的具体意义</strong></p><p>IOC的具体意义： 有个容器，在需要的时候把容器中的对象加入代码中去</p><p>关键：容器，加入容器，注入</p><p>抽象：将控制权交给用户</p><p>目的：</p><p>1.实现灵活的ocp</p><p>2.将控制权交给用户</p><p>SpringBoot最核心的线路就是<strong>如何把对象加入到容器中</strong>，把握住这条线路，可以很好的学习SpringBoot</p><h2 id="为什么引入容器后系统变的稳定" tabindex="-1"><a class="header-anchor" href="#为什么引入容器后系统变的稳定" aria-hidden="true">#</a> 为什么引入容器后系统变的稳定？</h2><p>因为它们每个类之间没有了依赖</p><p><img src="'+m+'" alt="Image text"></p><p>A、B、C、D可以看做是四个类，耦合在一起，当其中一个出现问题，整个系统就不能使用，现在引入容器的概念</p><p><img src="'+v+'" alt="Image text"></p><p>中间这个就是容器，四个类没有依赖，通过容器将它们带动起来，好处是如果A、B、C、D出现了变化，不会影响其他类，整个系统变成了松耦合</p><h2 id="spring-ioc的核心机制-实例化与注入" tabindex="-1"><a class="header-anchor" href="#spring-ioc的核心机制-实例化与注入" aria-hidden="true">#</a> Spring IOC的核心机制：实例化与注入</h2><p>Spring 把对象加入到容器有俩种方法：XML和注解，有了SpringBoot后，最流行的就是注解了</p><p>最常用的是@Component，在SpringBoot中，当类上加上@Component，这个类就会被SpringBoot扫描后加入到容器里，在需要的时候注入到其他类中</p><h3 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h3><p>一、@Component 组件/类/bean 类的实例化</p><p>二、与@Component 作用相同</p><p>@Service 类如果是服务使用</p><p>@Controller 类如果是控制器使用</p><p>@Repository 用于标识一个类为数据访问层（dao）组件，通常与持久操作相关的类一起使用</p>',120),F={href:"https://github.com/zhaobao1830/misscmszb",target:"_blank",rel:"noopener noreferrer"},L=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FileMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileDo</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">FileDo</span> <span class="token function">selectByMd5</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;md5&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> md5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三、@Configuration：把一组bean加入到容器</p><p>从Spring3.0，@Configuration用于定义<strong>配置类</strong>，可替换xml配置文件，被注解的类内部包含有一个或 多个 被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。</p><p><strong>注意</strong>：@Configuration注解的配置类有如下要求：</p><p>@Configuration不可以是final类型；</p><p>@Configuration不可以是匿名类；</p><p>嵌套的configuration必须是静态类。</p><p>@Configuration除了常用语配置类，还可以和@bean搭配，将@bean加入到容器里</p><h2 id="实例化和依赖注入时机与延迟实例化" tabindex="-1"><a class="header-anchor" href="#实例化和依赖注入时机与延迟实例化" aria-hidden="true">#</a> 实例化和依赖注入时机与延迟实例化</h2><p>在Spring Boot应用启动的时候，IOC容器就已经开始对象的实例化了，它还会把实例化好的对象注入到我们的代码片段里面</p><p>如果类上没有加@Component注解，类就不会加入到容器中，默认情况下，如果在其他类里通过@Autowired注入类就会报错</p><p>可以通过设置@Autowired(required = false)来解决这个错误</p><p><strong>备注：</strong> 这时注入（也就是启动的时候）不会报错，但执行方法的时候会报错，因为这个值是空的</p><p>IOC默认是立即执行对象实例化和注入</p><p>如果想<strong>延迟实例化</strong>就用@Lazy注解</p><p><img src="`+b+'" alt="Image text"></p><p><strong>备注：</strong> 现在有俩个类A和B，如果类A中使用了类B，类B上加了@lazy，这时是不起作用的，因为类A是立即执行</p><p>如果想类B中的@lazy有效，就需要在类A上也加@lazy</p><h2 id="di注入的三种方式" tabindex="-1"><a class="header-anchor" href="#di注入的三种方式" aria-hidden="true">#</a> DI注入的三种方式</h2><p><strong>成员变量注入：</strong> 我项目中最常用的是这种</p><p>@Autowired</p><p>private Diana diana</p><p><strong>构造注入：</strong></p><p><img src="'+g+'" alt="Image text"></p><p>上面定义变量，下面通过构造方法注入并赋值</p><p>变量上不用加@Autowired</p><p><strong>方法注入：</strong></p><p><img src="'+y+`" alt="Image text"></p><p>通过set方法给变量赋值</p><h2 id="autowired" tabindex="-1"><a class="header-anchor" href="#autowired" aria-hidden="true">#</a> @Autowired</h2><p>@Autowired注入的两种方式</p><p>bytype 是默认注入方式</p><p>byname 多个接口实现类，通过byname方式注入，如果还用bytype会报错</p><p>比如现在有个接口ISkill，有irelia和diana俩个实现类</p><p>如果是</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>

<span class="token keyword">private</span> <span class="token class-name">ISkill</span> irelia <span class="token comment">// 这是注入的irelia对象</span>

<span class="token keyword">private</span> <span class="token class-name">ISkill</span> diana <span class="token comment">// 这是注入的diana对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这俩种写法是对的，SpringBoot通过名字注入不同的实现类的对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>

<span class="token keyword">private</span> <span class="token class-name">ISkill</span> iskill
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种写法是错误的，因为SpringBoot中的@Autowired默认是bytype注入方式，当ISkill 有俩个实现类时，不知道该注入哪个实现类</p><p>如果ISkill 只有一个实现类 那上面的写法是对的</p><h3 id="bytype" tabindex="-1"><a class="header-anchor" href="#bytype" aria-hidden="true">#</a> bytype</h3><p>是Autowired注解的默认注入方式；可能会有以下几个情况：</p><ul><li><p>找不到任何一个bean，直接报错；</p></li><li><p>找到一个，直接注入；</p></li><li><p>找到多个，并不一定会报错，后续spring还会有一个自动推断的行为，它会根据定义的变量名来寻找对应实现类；按照字段的名字推断选择哪个bean; byname</p></li></ul><h3 id="byname" tabindex="-1"><a class="header-anchor" href="#byname" aria-hidden="true">#</a> byname</h3><p><img src="`+h+'" alt="Image text"></p><h3 id="qualifier" tabindex="-1"><a class="header-anchor" href="#qualifier" aria-hidden="true">#</a> @Qualifier</h3><p>上面的写法都是Spring自动推导的</p><p>@Qualifier注解可以由我们主动指定选择哪个实现类；</p><p><img src="'+w+'" alt="Image text"></p><h2 id="面向对象变化中的应对方案" tabindex="-1"><a class="header-anchor" href="#面向对象变化中的应对方案" aria-hidden="true">#</a> 面向对象变化中的应对方案</h2><ul><li><p>策略模式：制定一个interface，然后用多个类实现这个interface</p></li><li><p>属性配置：将变化的地方抽取到配置文件里</p></li></ul><p>一、配置文件具有集中性</p><p>二、配置文件清晰，没有业务逻辑干扰</p><div class="custom-container tip"><p class="custom-container-title">备注</p><p>实际开发中，我们会把上面的俩种方法集合起来用</p><p>将方法抽取为公共接口</p><p>将经常改变的放到配置文件里，比如数据库、JPA、redis等配置放到配置文件里</p></div><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> @Configuration</h2><p>使用@Configuration和@bean搭配，可以把一个bean放到容器中</p><p><img src="'+f+'" alt="Image text"></p><p><strong>已经有了@Component，为什么还会出现@Configuration呢？</strong></p><p>为了解决变化，单独的@Component是没有意义的，无法解决变化</p><p><img src="'+S+'" alt="Image text"></p><p>在一个类中，除了有方法，还有变量，如果我们要想给变量赋值，可以使用set方法或者构造函数</p><p>上面的例子里只加了@Component注解，只会将类加到容器汇总，无法给变量赋值，但我们用Configuration和@bean搭配，就可以通过调用构造函数给遍历赋值</p><p><img src="'+I+'" alt="Image text"></p><p><strong>@Configuration是用来替换bean的xml配置</strong></p><p><img src="'+C+`" alt="Image text"></p><p>xml的这种配置，现在可以用简单的@Configuration+@bean替换</p><p><strong>为什么spring偏爱配置</strong></p><p>OCP是为了解决代码变化，但是代码变化不能消除，只能进行隔离/反映到配置文件。（修改配置，而不是修改代码）</p><h3 id="配置的分类" tabindex="-1"><a class="header-anchor" href="#配置的分类" aria-hidden="true">#</a> 配置的分类</h3><p>xml配置和application文件里的key、value配置</p><p>下面使用的是@Configuration+application文件的实现方案</p><p>获取配置文件中的值 @Value(&quot;\${key}&quot;): key为properties配置文件中的key</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@value</span><span class="token punctuation">(</span><span class="token string">&quot;\${mysql.ip}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ip<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@value</span><span class="token punctuation">(</span><span class="token string">&quot;\${mysql.port}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">IConnect</span> <span class="token function">mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mysql</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ip<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mysql</span> <span class="token keyword">implements</span> <span class="token class-name">IConnect</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ip<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Mysql</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">,</span> <span class="token class-name">Integer</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// xxx</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// application.properties</span>
mysql<span class="token punctuation">.</span>ip<span class="token operator">=</span><span class="token string">&quot;127.0.0.1&quot;</span>
mysql<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">3307</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为什么在bean上添加-component注解-这个bean就会加到容器中呢" tabindex="-1"><a class="header-anchor" href="#为什么在bean上添加-component注解-这个bean就会加到容器中呢" aria-hidden="true">#</a> 为什么在bean上添加@Component注解，这个bean就会加到容器中呢？</h2><p>为什么在bean上添加@Component注解，这个bean就会加到容器中呢？</p><p>注解的基本原理是通过反射机制来实现的，通过反射是可以读取到这个注解的信息的</p><p>spring通过@ComponentScan这个注解进行扫描，默认加在入口文件上，扫描入口同级和同级包子级</p><p>当扫描到bean上有@Component注解，就把这个bean注入到IOC容器中</p><p>如果想指定扫描包的位置，可以在@ComponentScan(&#39;包的位置&#39;&#39;)里添加包，比如@ComponentScan(&#39;com.zb&#39;)</p><p>@ComponentScan指定扫描包的类后，之前默认的还是存在</p><p>@ComponentScan(&#39;com.zb&#39;)中的&#39;com.zb&#39;是给basePackages参数传值，值可以是数组</p><p><img src="`+q+'" alt="Image text"></p><h2 id="对spring-boot的自动装配理解" tabindex="-1"><a class="header-anchor" href="#对spring-boot的自动装配理解" aria-hidden="true">#</a> 对spring-boot的自动装配理解</h2><p><strong>自动装配是spring-boot最核心的功能</strong></p><p><strong>自动装配解决的了什么问题？</strong></p><p>把配置的bean（包括自己写的和第三方的sdk）自动加入到IOC容器中。在没有自动配置的时候，我们是用xml进行配置，然后加入到IOC容器</p><p><strong>原理理解：</strong></p><p>SpringBoot的主配置类：</p><p><img src="'+x+'" alt="Image text"></p><p>里面有一个main方法运行了一个run()方法，在run方法中要传入一个被@SpringBootApplication注解的类的元类。</p><h3 id="springbootapplication注解" tabindex="-1"><a class="header-anchor" href="#springbootapplication注解" aria-hidden="true">#</a> @SpringBootApplication注解</h3><p>SpringBoot应用中，这个注解标注在哪个类。就说明这个类是SpringBoot的主配置类，SpringBoot就会运行这个类的main方法来启动SpringBoot项目。</p><p>那@SpringBootApplication注解到底是什么呢，点进去看看：</p><p><img src="'+_+'" alt="Image text"></p><p>发现@SpringBootApplication是一个组合注解。</p><h3 id="springbootconfiguration注解" tabindex="-1"><a class="header-anchor" href="#springbootconfiguration注解" aria-hidden="true">#</a> @SpringBootConfiguration注解</h3><p><img src="'+j+'" alt="Image text"></p><p>这个注解很简单，表明该类是一个Spring的配置类。</p><p><strong>@Configuration注解</strong></p><p><img src="'+B+'" alt="Image text"></p><p>说明Spring的配置类也是Spring的一个bean</p><p><strong>@Configuration</strong>主要做俩件事：</p><p>一是使用了@Configuration的bean，部分属性是写在配置文件里的，允许从配置文件里修改bean相关字段的属性，比如端口、ip这些属性，在配置文件里写，通过@value注解赋值给bean中的字段；</p><p>二是将这些bean加到IOC容器里</p><h3 id="enableautoconfiguration注解" tabindex="-1"><a class="header-anchor" href="#enableautoconfiguration注解" aria-hidden="true">#</a> @EnableAutoConfiguration注解</h3><p>这个注解是为了实现<strong>模块装配</strong></p><p><img src="'+A+'" alt="Image text"></p><div class="custom-container tip"><p class="custom-container-title">备注</p><p>模块装配，就是为了实现某个功能，我们将不同的sdk放到一起，比如有功能需要用到redis、mogodb，组合成一个模块，使用@EnableAutoConfiguration可以把这个模块加入到容器里</p></div><p><strong>已经有了@Confirguration，为什么还要@EnableAutoConfiguration?</strong></p><p>使用@Confirguration，处理的是自己写的业务类，是放在当前的工程下面，这个注解包含@Component注解，我们知道，在启动文件同级或子级包下，带有@Component注解的bean都是可以直接被加入到IOC容器中的</p><p>@EnableAutoConfiguration是为了加载引用的jar包或者第三方sdk（包括jar包和spring.factories里的配置文件）</p><p><img src="'+E+'" alt="Image text"></p><p><strong>@AutoConfigurationPackage</strong></p><p>作用是将<strong>添加该注解的类所在的package</strong>作为<strong>自动配置package</strong>进行管理。</p><p>可以通过 AutoConfigurationPackages 工具类获取自动配置package列表。当通过注解@SpringBootApplication标注启动类时，已经为启动类添加了@AutoConfigurationPackage注解。路径为 @SpringBootApplication -&gt; @EnableAutoConfiguration -&gt; @AutoConfigurationPackage。也就是说当SpringBoot应用启动时默认会将启动类所在的package作为自动配置的package。</p><p>进入AutoConfigurationImportSelector.class</p><p>这里有一个最重要的方法：selectImports 这个方法就是用来扫描第三方sdk的配置文件（类似vue里的插件），然后把配置文件里的配置类加入到IOC容器</p><p><img src="'+D+'" alt="Image text"></p><p><strong>@Import注解</strong></p><p>一，@Import（配置类.class）</p><p><img src="'+R+'" alt="Image text"></p><p>二，设置一个ImportSelector接口的实现类，实现ImportSelects方法，返回配置类全类名；</p><p><img src="'+z+'" alt="Image text"></p><p>返回的是一个数组，可以一次导入多个bean的元类</p><p><img src="'+O+'" alt="Image text"></p><p>@Import（XXXXSelector.class）</p><p>总结：@Import可以直接将配置类导入到容器里，也可以通过ImportSelector接口的实现类将配置类导入到容器里</p><h2 id="spi-service-provider-interface" tabindex="-1"><a class="header-anchor" href="#spi-service-provider-interface" aria-hidden="true">#</a> SPI：Service Provider Interface</h2><p>主要目的：应对变化</p><p>多方：调用方 标准服务接口 对应多种方案（a,b,c）</p><p><img src="'+H+'" alt="Image text"></p><p>思想就是通过interface和策略模式，写出稳定的代码，对外暴露是标准的接口</p><p>把变化放到配置文件里，通过修改配置文件是执行不同的方案</p><p><strong>配置文件和@Primary、@条件注解的区别？</strong></p><p>@Primary、@条件注解关注的是类、对象</p><p>配置文件关注的整体的方案，二者的粒度不一样</p><h2 id="springboot主动发现机制" tabindex="-1"><a class="header-anchor" href="#springboot主动发现机制" aria-hidden="true">#</a> SpringBoot主动发现机制</h2><p>为什么SpringBoot不用在程序开始的时候注册controller，但程序就知道应该走哪一个controller？</p><p>为什么我们在SpringBoot项目里写的全局异常类，程序会自己识别呢？</p><p>这都是因为SpringBoot的主动发现机制：</p><ul><li><p>特定的注解发现，SpringBoot在扫描到这些特定的注解时候，就知道这个类的作用，当符合条件时候就回去调用这个类。比如全局异常处理器上的注解@ControllerAdvice</p></li><li><p>使用接口发现，当类实现WebMvcRegistrations接口的时候SpringBoot就知道这个类的作用。注意这个类需要加入到容器中，即加上@Component注解，下面的实例加的是@Configuation注解</p></li></ul><p><img src="'+P+`" alt="Image text"></p><h2 id="responseentity注解" tabindex="-1"><a class="header-anchor" href="#responseentity注解" aria-hidden="true">#</a> @ResponseEntity注解</h2><p>ResponseEntity继承了HttpEntity，可以添加HttpStatus状态码的HttpEntity的扩展类</p><p>ResponseEntity可以定义返回的HttpStatus（状态码）和HttpHeaders（消息头：请求头和响应头）</p><p>ResponseEntity的优先级高于@ResponseBody。在不是ResponseEntity的情况下才去检查有没有@ResponseBody注解。如果响应类型是ResponseEntity可以不写@ResponseBody注解，写了也没有关系。简单的说</p><p>@ResponseBody可以直接返回Json结果，</p><p>@ResponseEntity不仅可以返回json结果，还可以定义返回的HttpHeaders和HttpStatus</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Category</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryCategoriesByPid</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;pid&quot;</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> pid<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 响应400，相当于ResponseEntity.status(HttpStatus.BAD_REQUEST).build();</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token comment">//ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);</span>
       <span class="token comment">// ResponseEntity.notFound().build();</span>
        <span class="token comment">// ResponseEntity.ok(null);</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Category</span><span class="token punctuation">&gt;</span></span> categoryList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>categoryService<span class="token punctuation">.</span><span class="token function">queryCategoriesByPid</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>categoryList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 响应404</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>categoryList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分类查询功能的实现" tabindex="-1"><a class="header-anchor" href="#分类查询功能的实现" aria-hidden="true">#</a> 分类查询功能的实现</h2><p>常用的分级处理是记录上级的id，通过parent-id查询，如果是层级低的，4级以下，这种是可以的</p><p>但如果层级多，推荐用路径表示法，新增一个字段，值是每级的id或者其他属性拼装起来</p><p><img src="`+M+'" alt="Image text"></p><h2 id="java-bean里可不可以写业务逻辑" tabindex="-1"><a class="header-anchor" href="#java-bean里可不可以写业务逻辑" aria-hidden="true">#</a> java bean里可不可以写业务逻辑？</h2><p>java bean就是定义的model、vo这些类</p><p>大部分文章里不建议写，但我认为java bean是实体类，肯定有自己的逻辑，可以根据实际需求，把一些逻辑携带java bean里</p>',156);function N(V,J){const p=e("ExternalLinkIcon");return o(),c("div",null,[W,s("p",null,[n("下面的例子是用在"),s("a",F,[n("mapper"),i(p)]),n("上")]),L])}const T=t(Q,[["render",N],["__file","01.html.vue"]]);export{T as default};
