import{_ as t,o as e,c as o,R as n}from"./chunks/framework.1nBpG9uI.js";const m=JSON.parse('{"title":"组件的封装","description":"","frontmatter":{},"headers":[],"relativePath":"frontKnowledge/other/01.md","filePath":"frontKnowledge/other/01.md","lastUpdated":1728532320000}'),a={name:"frontKnowledge/other/01.md"},p=n('<h1 id="组件的封装" tabindex="-1">组件的封装 <a class="header-anchor" href="#组件的封装" aria-label="Permalink to &quot;组件的封装&quot;">​</a></h1><p><strong>封装组件的时候，必须在组件的灵活性和易用性之间/稳定性之间做出一个选择</strong></p><p>组件越灵活，相应的越不稳定，也越不易用；</p><p>越是简单的组件，灵活性和定制性就不够。</p><p>参考Lin ui 可以把小程序里的Page都换成Component，因为Component更加灵活</p><p><strong>组件的意义是什么？</strong></p><p>组件从三个方面：样式、骨架、业务逻辑/行为上对代码进行封装，方便开发者在日后重用/复用样式、骨架和业务逻辑</p><p><strong>为了保证组件的灵活性，可以采取以下措施进行改造：</strong></p><p>以小程序的组件为例：</p><p>1、提供外部样式类(样式)</p><p>2、slot插槽的使用（骨架）</p><p>封装组件的时候，要设置好默认值</p>',12),r=[p];function s(_,c,d,i,l,h){return e(),o("div",null,r)}const g=t(a,[["render",s]]);export{m as __pageData,g as default};
