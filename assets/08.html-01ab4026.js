import{_ as t,M as e,p,q as o,R as n,t as a,N as l,a1 as c}from"./framework-b7c41258.js";const i="/zhaobao1830-notes/assets/01-917ff616.png",u={},r=n("h1",{id:"lombok",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lombok","aria-hidden":"true"},"#"),a(" lombok")],-1),d=n("h2",{id:"官网",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#官网","aria-hidden":"true"},"#"),a(" 官网")],-1),k={href:"https://projectlombok.org/",target:"_blank",rel:"noopener noreferrer"},m=c('<h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的" aria-hidden="true">#</a> 目的</h2><p>通过简单注解来精简代码</p><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h2><ul><li><p>1、提高编码效率</p></li><li><p>2、使代码更简洁</p></li><li><p>3、消除冗长代码</p></li><li><p>4、避免修改字段的时候忘记修改方法名</p></li></ul><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><p>1、使用lombok虽然能够省去手动创建setter和getter方法等繁琐，但缺降低了源代码文件的可读性和完整性，降低了阅读源代码的舒适度</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><ul><li><p>1、JSR 269 Pluggable Annotation Processing Api</p></li><li><p>2、javac从java6开始支持&quot; JSR 269 API&quot; 规范</p></li><li><p>3、只要程序实现了该API，就能在javac运行的时候得到调用</p></li><li><p>4、Lombok实现了&quot; JSR 269 API&quot; ，在编译时，javac编译源码的具体流程如下：</p></li></ul><p><img src="'+i+`" alt="Image text"></p><p>首先有源代码(Source File)，javac对源代码进行处理，生成一颗抽象语法树（AST），lombok对AST进行处理，生成新的抽象语法树，然后生成字节码</p><h2 id="项目引入" tabindex="-1"><a class="header-anchor" href="#项目引入" aria-hidden="true">#</a> 项目引入</h2><p>maven引入Lombok：</p><p>1、pom.xml文件引入：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、idea在setting -&gt; plugins 安装Lombok插件</p><h2 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h2><ul><li><p>@Getter 自定义的属性添加getter方法</p></li><li><p>@Setter 自定义的属性添加setter方法</p></li><li><p>@NoArgsConstructor 生成无参构造函数</p></li><li><p>@AllArgsConstructor 生成全参构造函数</p></li><li><p>@RequiredArgsConstructor 为所有@NonNull字段生成一个构造函数</p></li><li><p>@NonNull 作用于属性，表明属性不能为空</p></li><li><p>@Builder 可以使用链式调用，初始化对象</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonDTO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/banner&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BannerController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/test/{id}&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 链式初始化对象</span>
<span class="token comment">//        PersonDTO dto = PersonDTO.builder()</span>
<span class="token comment">//                .age(25)</span>
<span class="token comment">//                .name(&quot;ss&quot;)</span>
<span class="token comment">//                .build();</span>
        <span class="token class-name">PersonDTO</span> dto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonDTO</span><span class="token punctuation">(</span><span class="token string">&quot;ss&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;1111&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">备注</p><p>类上加了@Builder注解后，创建对象要这样写： PersonDTO.builder().name(&quot;7yue&quot;).age(18).build();</p><p>1、一旦带上build注解，就不可以用new方式实例化，原因是builder给了一个私有的构造函数</p><p>2、如果想既可以用链式创建对象，又想用new创建对象，就需要在类上加@NoArgsConstructor或@AllArgsConstructor注解</p></div><div class="custom-container tip"><p class="custom-container-title">特别备注</p><p>类上面必须加上@Getter注解，否则使用builder、new生成对象，返回到前端的时候，会报错org.springframework.web.HttpMediaTypeNotAcceptableException: Could not find acceptable representation</p></div>`,20);function v(b,g){const s=e("ExternalLinkIcon");return p(),o("div",null,[r,d,n("p",null,[n("a",k,[a("https://projectlombok.org/"),l(s)])]),m])}const f=t(u,[["render",v],["__file","08.html.vue"]]);export{f as default};
