import{_ as n,p as s,q as a,a1 as e}from"./framework-b7c41258.js";const t={},p=e(`<h1 id="vue3中使用provide-inject替换getcurrentinstance" tabindex="-1"><a class="header-anchor" href="#vue3中使用provide-inject替换getcurrentinstance" aria-hidden="true">#</a> vue3中使用provide/inject替换getCurrentInstance</h1><p>之前项目里在main.js定义全局方法，组件里从getCurrentInstance()方法引入proxy，通过proxy调用全局方法</p><p>main.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>useDict <span class="token operator">=</span> useDict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> getCurrentInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
  
  <span class="token keyword">const</span> <span class="token punctuation">{</span> proxy <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取字典数据</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> sys_yes_no <span class="token punctuation">}</span> <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">useDict</span><span class="token punctuation">(</span><span class="token string">&quot;sys_yes_no&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式是把proxy当this使用，在最新的文档里，getCurrentInstance以及被废弃</p><p>如果想在全局定义方法，在组件里使用，推荐用<strong>provide/inject</strong>替代</p><p>main.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;rrrrr&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义全局方法</span>
app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> test<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>  import { inject } from &#39;vue&#39;
  
  // 使用
  const tt = inject(&#39;test&#39;)
  tt()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">备注</p><p>我不喜欢在全局定义方法，还是习惯哪里使用哪里引入方法</p><p>provide/inject不喜欢用，因为不好把控</p></div>`,11),c=[p];function i(o,l){return s(),a("div",null,c)}const r=n(t,[["render",i],["__file","26.html.vue"]]);export{r as default};
