import{_ as s,o as a,c as i,R as n}from"./chunks/framework.1nBpG9uI.js";const b=JSON.parse('{"title":"Jackson","description":"","frontmatter":{},"headers":[],"relativePath":"javaKnowledge/11.md","filePath":"javaKnowledge/11.md","lastUpdated":1727061098000}'),e={name:"javaKnowledge/11.md"},p=n(`<h1 id="jackson" tabindex="-1">Jackson <a class="header-anchor" href="#jackson" aria-label="Permalink to &quot;Jackson&quot;">​</a></h1><p>Jackson是SpringBoot自带的序列化框架，所以不用安装依赖就可以使用</p><h2 id="常用注解" tabindex="-1">常用注解 <a class="header-anchor" href="#常用注解" aria-label="Permalink to &quot;常用注解&quot;">​</a></h2><p><strong>@JsonIgnore</strong>：可用于字段、getter/setter、构造函数参数上，作用相同，都会对相应的字段产生影响。使相应字段不参与序列化和反序列化</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>有时候jackson的默认配置不满足需求，我们就可以自定义配置</p><p>jackson自定义配置有俩种：yml配置和自定义ObjectMapper的bean</p><h3 id="yml配置" tabindex="-1">yml配置 <a class="header-anchor" href="#yml配置" aria-label="Permalink to &quot;yml配置&quot;">​</a></h3><p>application.yml</p><div class="language-yml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  jackson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 前端传递的参数，在对象里没有定义，false不会序列化，true会序列化（报错，提示对象里没有定义）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    deserialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      fail-on-unknown-properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 变量名以下划线形式展示</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 前端传递的参数和返回的数据都是下划线形式</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    property-naming-strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SNAKE_CASE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 日期返回时间戳</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    serialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      write-dates-as-timestamps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">备注</p><p>如果property-naming-strategy设置为SNAKE_CASE，那么<strong>前端传入的参数必须是下划线形式</strong>，如果是驼峰形式，后端是接收不到的</p></div><h3 id="自定义objectmapper的bean" tabindex="-1">自定义ObjectMapper的bean <a class="header-anchor" href="#自定义objectmapper的bean" aria-label="Permalink to &quot;自定义ObjectMapper的bean&quot;">​</a></h3><p>项目地址：<a href="https://github.com/zhaobao1830/misszb" target="_blank" rel="noreferrer">misscmszb</a></p><p>CommonConfiguration.java</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CommonConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Jackson2ObjectMapperBuilderCustomizer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customJackson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jacksonObjectMapperBuilder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 前端传递的参数，在对象里没有定义，false不会序列化，true会序列化（报错，提示对象里没有定义）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            jacksonObjectMapperBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">failOnUnknownProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 返回的属性驼峰转换为小写加下划线</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            jacksonObjectMapperBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">propertyNamingStrategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PropertyNamingStrategies.SNAKE_CASE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">备注</p><p>我一般用yml配置，因为简单</p><p>第二种方式没怎么用过，不了解这种方式的优点</p><p>一个项目里俩种方式都有的话，第二种会覆盖第一种</p></div>`,16),l=[p];function t(r,h,k,c,o,d){return a(),i("div",null,l)}const g=s(e,[["render",t]]);export{b as __pageData,g as default};
