import{_ as e,o as t,c as o,R as a}from"./chunks/framework.1nBpG9uI.js";const m=JSON.parse('{"title":"自定义hooks","description":"","frontmatter":{},"headers":[],"relativePath":"vueKnowledge/03.md","filePath":"vueKnowledge/03.md","lastUpdated":1717124691000}'),p={name:"vueKnowledge/03.md"},s=a('<h1 id="自定义hooks" tabindex="-1">自定义hooks <a class="header-anchor" href="#自定义hooks" aria-label="Permalink to &quot;自定义hooks&quot;">​</a></h1><p>官网地址：<a href="https://cn.vuejs.org/guide/extras/composition-api-faq.html#what-is-composition-api" target="_blank" rel="noreferrer">https://cn.vuejs.org/guide/extras/composition-api-faq.html#what-is-composition-api</a></p><p>可以将相关的feature组合在一起</p><p>易于重用</p><p>优势：</p><p>1、以函数的形式调用，清楚的了解参数和返回的类型</p><p>2、避免命名冲突</p><p>3、代码逻辑脱离组件存在</p><p>4、泛型在函数中的使用</p><p>5、与react hooks相比</p><p>（1）、仅在 <code>setup()</code> 或 <code>&lt;script setup&gt;</code> 调用一次，而且不用担心闭包变量的问题</p><p>（2）、不限制调用顺序，可以有条件的进行调用</p><p>（3）、Vue 的响应性系统运行时会自动收集计算属性和侦听器的依赖，因此无需手动声明依赖</p><p>（4）、无需手动缓存回调函数来避免不必要的组件更新。Vue 细粒度的响应性系统能够确保在绝大部分情况下组件仅执行必要的更新。对 Vue 开发者来说几乎不怎么需要对子组件更新进行手动优化。</p>',14),r=[s];function i(c,n,_,d,h,l){return t(),o("div",null,r)}const f=e(p,[["render",i]]);export{m as __pageData,f as default};
