import{_ as n,p as s,q as a,a1 as t}from"./framework-b7c41258.js";const e={},p=t(`<h1 id="小程序中保存数据的几种方式" tabindex="-1"><a class="header-anchor" href="#小程序中保存数据的几种方式" aria-hidden="true">#</a> 小程序中保存数据的几种方式</h1><p>第一种、保存在data中，缺点是：保存、调用的时候都需要用this.data.X，不方便</p><p>第二种、保存在缓存localstorage中，缺点是：保存的数据是永久的，数据多了后页面会卡顿</p><p>第三种、保存在全局APP中，缺点是：只是单独一个页面使用的数据，保存在全局中，不好维护</p><p>上面这三种方法还有个共同的问题：</p><p>同样名称的数据只能保存一份，比如themes，数据可以替换，但不能保存多个</p><p>第四种、使用类和通过类new的对象来保存</p><p>theme.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Theme</span> <span class="token punctuation">{</span>

  <span class="token keyword">static</span> locationA <span class="token operator">=</span> <span class="token string">&#39;t-1&#39;</span>

  themes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">async</span> <span class="token function">getThemes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Theme<span class="token punctuation">.</span>locationA<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>themes <span class="token operator">=</span> <span class="token keyword">await</span> Http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">theme/by/names</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        names
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">getHomeLocationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>themes<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">t</span> <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>name <span class="token operator">===</span> Theme<span class="token punctuation">.</span>locationA<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>home.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Theme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">await</span> theme<span class="token punctuation">.</span><span class="token function">getThemes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> themeA <span class="token operator">=</span> theme<span class="token punctuation">.</span><span class="token function">getHomeLocationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">备注</p><p>在theme类中定义themes，当new Theme生成对象后，调用接口请求，返回的数据保存到themes中</p><p><strong>对外暴露数据的时候，可以封装一个方法对外暴露</strong></p></div><div class="custom-container tip"><p class="custom-container-title">备注</p><p>在实际项目开发中，要根据实际情况来选择保存数据的方法</p><p><strong>如果要对接口返回的数据进行二次加工，我建议选择第四种方法</strong></p></div><p>**随感：**使用类和类的对象来保存数据，参考的是Java中类和对象的思想，Java都是创建类，在类里定义变量和方法，使用的时候就创建类的对象，通过类的对象来调用对外暴露的方法和变量</p>`,14),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","04.html.vue"]]);export{r as default};
