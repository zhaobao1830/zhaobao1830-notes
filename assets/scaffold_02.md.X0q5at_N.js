import{_ as a,o as e,c as s,R as n}from"./chunks/framework.1nBpG9uI.js";const p="/zhaobao1830-notes/assets/01.cQqGrqBR.png",t="/zhaobao1830-notes/assets/02.qf0t3Uh4.png",o="/zhaobao1830-notes/assets/03.-rVuQMBY.png",i="/zhaobao1830-notes/assets/04.TMRDwEVW.png",l="/zhaobao1830-notes/assets/05.PpOdCxHE.png",c="/zhaobao1830-notes/assets/06.ImFKkkW_.png",r="/zhaobao1830-notes/assets/07.FfYe_U0o.png",d="/zhaobao1830-notes/assets/08.YURPgfrh.png",m="/zhaobao1830-notes/assets/09.kv0BdTdc.png",h="/zhaobao1830-notes/assets/10.uMh9npwJ.png",P=JSON.parse('{"title":"npm link命令","description":"","frontmatter":{},"headers":[],"relativePath":"scaffold/02.md","filePath":"scaffold/02.md","lastUpdated":1720147322000}'),u={name:"scaffold/02.md"},g=n(`<h1 id="npm-link命令" tabindex="-1">npm link命令 <a class="header-anchor" href="#npm-link命令" aria-label="Permalink to &quot;npm link命令&quot;">​</a></h1><p>转载地址：<a href="https://blog.csdn.net/weixin_38080573/article/details/129022742" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_38080573/article/details/129022742</a></p><h2 id="需求" tabindex="-1">需求 <a class="header-anchor" href="#需求" aria-label="Permalink to &quot;需求&quot;">​</a></h2><p>在开发npm包时，我们需要将npm包进行本地调试，如果这时不断的发布测试版本，然后再安装测试版本就会比价麻烦，测试我们就可以使用<code>npm link</code> 来创建一个软连接进行本地调试解决这个问题。</p><h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><p>比如我们现在在开发一个npm模块，名称为npm-package。然后在本地的app-demo这个应用中来使用这个模块。</p><h2 id="创建链接" tabindex="-1">创建链接 <a class="header-anchor" href="#创建链接" aria-label="Permalink to &quot;创建链接&quot;">​</a></h2><p>先进入npm-package项目根目录，然后执行<code>npm link</code> 命令</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cd npm-package</span></span>
<span class="line"><span>npm link</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+p+'" alt="Image text"></p><p>在控制台执行下面命令来查看所有全局链接的名称</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm ls --global --depth 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+t+'" alt="Image text"></p><p>可以看到，在全局中npm-package已经和./…/…/…/…/…/Documents/yjian/demo/npm/npm-package建立了链接了</p><h2 id="项目使用" tabindex="-1">项目使用 <a class="header-anchor" href="#项目使用" aria-label="Permalink to &quot;项目使用&quot;">​</a></h2><p>进入app-demo 项目中，执行<code>npm link npm-package</code>命令从全局下载这个包到node_module中，之后就可以正常使用/调试这个包的功能了</p><div class="tip custom-block"><p class="custom-block-title">备注</p><p>npm link的npm-package，是package.json文件中name的值</p></div><p><img src="'+o+'" alt="Image text"></p><p>此时app-demo中的node_nodules是软链接过来的，如果我们修改npm-package里面的任何内容，都会同步到app-demo/node_modules中来的。这样我们调试起来就会非常的方便。</p><h2 id="去除软连" tabindex="-1">去除软连 <a class="header-anchor" href="#去除软连" aria-label="Permalink to &quot;去除软连&quot;">​</a></h2><p>进入项目app-demo根目录中，执行下面命令<code>npm unlink xxx</code> (xxx是npm包package.json文件中name字段的名称)</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm unlink npm-package</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+i+'" alt="Image text"></p><p>从<a href="https://docs.npmjs.com/cli/v10/commands/npm-uninstall" target="_blank" rel="noreferrer">npm的文档</a>中可以看到，其实npm unlink 就是npm uninstall的别名。</p><p><img src="'+l+'" alt="Image text"></p><h2 id="删除全局链接" tabindex="-1">删除全局链接 <a class="header-anchor" href="#删除全局链接" aria-label="Permalink to &quot;删除全局链接&quot;">​</a></h2><p>执行<code>npm rm --global xx</code>（xx是npm包名）来删除全局的软连接</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm rm --global npm-package</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+c+'" alt="Image text"></p><p>本以为到这里就已近删除了，可是在app-demo中<code>npm link npm-package</code>还是可以安装成功，这就证明这个包还在。</p><p>打开对应版本node安装包的lib/node_modules发现果然还在</p><p><img src="'+r+`" alt="Image text"></p><p>这里有个小技巧，如果不知道node的安装目录，可以在终端使用where 查找另一个全局安全的命令。</p><p>比如yarn</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 查找yarn在当前版本node中的完整安装路径</span></span>
<span class="line"><span>where yarn</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后就可以找到当前node的安装路径，进而可以在lib/node_modules查看当前node中全局安装的包。</p><p><img src="`+d+'" alt="Image text"></p><p>可以祭出终极一招，直接删除掉该文件夹即可</p><p><img src="'+m+'" alt="Image text"></p><div class="tip custom-block"><p class="custom-block-title">备注</p><p>上面这是mac系统下的显示，windows系统下，全局安装的文件夹在C:\\Program Files\\nodejs\\node_modules和C:\\Users\\Administrator\\AppData\\Roaming\\nvm\\v18.17.1\\node_modules中</p><p>直接删除就行</p></div><p><img src="'+h+'" alt="Image text"></p>',41),b=[g];function _(k,v,x,f,q,C){return e(),s("div",null,b)}const w=a(u,[["render",_]]);export{P as __pageData,w as default};
