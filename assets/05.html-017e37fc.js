import{_ as e,M as o,p as c,q as i,R as n,t as s,N as t,a1 as p}from"./framework-b7c41258.js";const l="/zhaobao1830-notes/assets/01-2482ad68.png",u="/zhaobao1830-notes/assets/02-36bdb374.png",r={},k=n("h1",{id:"异常深度剖析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#异常深度剖析","aria-hidden":"true"},"#"),s(" 异常深度剖析")],-1),d={href:"https://github.com/zhaobao1830/misszb",target:"_blank",rel:"noopener noreferrer"},m=p(`<h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><p>异常分类Throwable分为Error与Exception</p><p>Error:一般系统级别，我们无法处理</p><p>Exception：一般应用层面，我们可以处理</p><p>Exception分为：CheckException与RuntimeException</p><p>CheckException：必须处理，如果不处理，在编译阶段就会报错</p><p>处理异常的时候，可以在当前位置进行处理，比如记录日志；也可以通过throws Exception往外抛异常，但总有一个地方要对异常进行处理</p><p>RuntimeException：运行时异常，不一定能在编译阶段发现，也不要求强制进行处理</p><div class="custom-container tip"><p class="custom-container-title">备注</p><p>只要没有继承RuntimeException，那就是CheckException</p><p>如果异常在编译阶段就要处理，那就定义成CheckException</p></div><h2 id="全局异常处理" tabindex="-1"><a class="header-anchor" href="#全局异常处理" aria-hidden="true">#</a> 全局异常处理</h2><h3 id="全局异常类" tabindex="-1"><a class="header-anchor" href="#全局异常类" aria-hidden="true">#</a> 全局异常类</h3><p>GlobalExceptionAdvice.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zb<span class="token punctuation">.</span>misszb<span class="token punctuation">.</span>core</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>zb<span class="token punctuation">.</span>misszb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">ExceptionCodeConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>zb<span class="token punctuation">.</span>misszb<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHeaders</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">ObjectError</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">MethodArgumentNotValidException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseStatus</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">ConstraintViolationException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionAdvice</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ExceptionCodeConfiguration</span> codeConfiguration<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UnifyResponse</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> requestUrl <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;系统出现错误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UnifyResponse</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnifyResponse</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span> <span class="token string">&quot;服务器异常&quot;</span><span class="token punctuation">,</span> method <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token operator">+</span> requestUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UnifyResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleHttpException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> requestUrl <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UnifyResponse</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnifyResponse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> codeConfiguration<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> requestUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpStatus</span> httpStatus <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getHttpStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UnifyResponse</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> httpStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UnifyResponse</span> <span class="token function">handleBeanValidation</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">MethodArgumentNotValidException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> requestUrl <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 有可能多个校验都报错，所以这里的异常用数组保存</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectError</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">formatAllErrorMessages</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UnifyResponse</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span>method <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> requestUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>code<span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">UnifyResponse</span> <span class="token function">handleConstraintException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ConstraintViolationException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> requestUrl <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UnifyResponse</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> method <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> requestUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 拼接多个异常信息</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">formatAllErrorMessages</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectError</span><span class="token punctuation">&gt;</span></span> errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuffer</span> errorMsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        errors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>error <span class="token operator">-&gt;</span>
                errorMsg<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;;&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> errorMsg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">备注</p><p>在全局异常类里，定义处理Exception、HttpException、MethodArgumentNotValidException、ConstraintViolationException四种异常</p></div><div class="custom-container tip"><p class="custom-container-title">备注</p><p><strong>在全局异常配置类里，一定要把MethodArgumentNotValidException和ConstraintViolationException俩种异常都处理</strong></p><p>MethodArgumentNotValidException 和ConstraintViolationException 都是用于处理参数校验异常的异常类</p><p>俩个异常类的区别，网上找的资料看不懂</p></div><div class="custom-container tip"><p class="custom-container-title">备注</p><p>为什么处理HttpException和其他异常时，信息的返回操作不一样？</p><p>其他的异常处理，直接返回对象就行</p><p>但HttpException异常还有多个子异常，需要自定义HttpStatus、ContentType，这时就需要用到ResponseEntity</p></div><p>本项目里，我们自定义了ForbiddenException、NotFoundException等异常类，都是HttpException异常类的子类，是按照返回的httpStatusCode码来定义的，具体查看项目</p><p>使用的时候，直接throw ForbiddenException(&quot;错误码&quot;)就行</p><p><strong>@ControllerAdvice、@ExceptionHandler、@ResponseStatus</strong></p>`,19),v={href:"https://zhaobao1830.github.io/zhaobao1830-notes/javaKnowledge/30.html",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>@ExceptionHandler用来在方法上指定监听哪种异常，比如@ExceptionHandler(HttpException.class)，监听的就是HttpException异常，</p><p>只要请求的方法里报HttpException类以及子类的异常，就会被这个方法捕获</p><p>使用@ResponseStatus注解指定返回的错误码，比如系统错误，就返回500，不要统一都是200</p><p><strong>为什么要把接口返回的信息都变成异常来处理？</strong></p><p>有的项目里，会把返回信息（比如没有找到、查询数据为空等信息）和异常分开处理，缺点是：需要区分什么是异常，什么是正常的返回信息</p><p>还有一种处理方式，就是所有的返回都按异常处理，已知异常就返回message信息和code码，未知异常除了返回信息，还会将错误保存在日志文件里</p><div class="custom-container tip"><p class="custom-container-title">备注</p><p>在我找到的开源项目里，返回前端的结果有俩种写法：</p><p>第一种、封装一个响应对象，里面包含status、msg、data属性，代码里传入相应的值，返回给前端</p><p>第二种、定义响应对象和异常类，正常的结果通过响应对象返回，如果没有结果、参数有问题、异常等情况，统一用封装的异常类处理</p><p>我现在也不知道这俩种方法哪种更好</p></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>在开发项目中，建议将异常信息按照不同的业务单独放到不同的配置文件.properties中；通过类来获取配置文件里的信息</p><h3 id="为什么推荐把异常信息写在配置文件" tabindex="-1"><a class="header-anchor" href="#为什么推荐把异常信息写在配置文件" aria-hidden="true">#</a> 为什么推荐把异常信息写在配置文件？</h3><p>一、异常信息散落在不同的代码文件里，不好管理</p><p>二、不好进行国际化处理，国际化针对的就是文本信息中的不同语言</p><h3 id="使用类来获取配置文件里的信息" tabindex="-1"><a class="header-anchor" href="#使用类来获取配置文件里的信息" aria-hidden="true">#</a> 使用类来获取配置文件里的信息</h3><p>ExceptionCodeConfiguration.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lin<span class="token punctuation">.</span>missyou<span class="token punctuation">.</span>core<span class="token punctuation">.</span>configuration</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PropertySource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;lin&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;classpath:config/exception-code.properties&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionCodeConfiguration</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> codes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> codes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCodes</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> codes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>codes <span class="token operator">=</span> codes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> codes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">ExceptionCodeConfiguration</span> codeConfiguration<span class="token punctuation">;</span>

codeConfiguration<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p><p>一、使用@PropertySource注解将类和配置文件关联起来</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;classpath:config/exception-code.properties&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+l+'" alt="Image text"></p><p>传入的参数是配置文件exception-code.properties所在的目录</p><p><img src="'+u+`" alt="Image text"></p><p>这样就可以把类和配置文件关联起来，当传入自定义的codes值，会返回对应的文字</p><p>比如传入10000，就会返回通用异常</p><p>二、使用@ConfigurationProperties定义前缀</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lin.codes[10000] = 通用异常

@ConfigurationProperties(prefix = &quot;lin&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件里，codes前面的前缀是lin，在获取配置信息的类上要加注解@ConfigurationProperties(prefix = &quot;lin&quot;)</p><p>第三、配置文件里的信息不用加引号</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lin.codes[10000] = 通用异常
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通用异常不用加引号，不然会报错</p>`,31);function g(h,f){const a=o("ExternalLinkIcon");return c(),i("div",null,[k,n("p",null,[s("项目参考地址："),n("a",d,[s("https://github.com/zhaobao1830/misszb"),t(a)])]),m,n("p",null,[n("a",v,[s("@ControllerAdvice"),t(a)]),s("用来注册全局异常类")]),b])}const x=e(r,[["render",g],["__file","05.html.vue"]]);export{x as default};
