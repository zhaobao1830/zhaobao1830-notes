const l=JSON.parse('{"key":"v-7bcfcb8c","path":"/javaKnowledge/01.html","title":"Java知识点","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"java web框架的发展历史","slug":"java-web框架的发展历史","link":"#java-web框架的发展历史","children":[]},{"level":2,"title":"为什么现在用SpringBoot不用Springmvc？","slug":"为什么现在用springboot不用springmvc","link":"#为什么现在用springboot不用springmvc","children":[]},{"level":2,"title":"Java为什么很多公司用？","slug":"java为什么很多公司用","link":"#java为什么很多公司用","children":[]},{"level":2,"title":"OCP（开闭原则）","slug":"ocp-开闭原则","link":"#ocp-开闭原则","children":[]},{"level":2,"title":"面向抽象编程","slug":"面向抽象编程","link":"#面向抽象编程","children":[{"level":3,"title":"第一版：烂大街的代码风格","slug":"第一版-烂大街的代码风格","link":"#第一版-烂大街的代码风格","children":[]},{"level":3,"title":"第二版：使用interface抽象风格","slug":"第二版-使用interface抽象风格","link":"#第二版-使用interface抽象风格","children":[]},{"level":3,"title":"第三版：工厂模式：分离对象实例化","slug":"第三版-工厂模式-分离对象实例化","link":"#第三版-工厂模式-分离对象实例化","children":[]},{"level":3,"title":"第四版：反射","slug":"第四版-反射","link":"#第四版-反射","children":[]},{"level":3,"title":"IOC和DI","slug":"ioc和di","link":"#ioc和di","children":[]}]},{"level":2,"title":"为什么引入容器后系统变的稳定？","slug":"为什么引入容器后系统变的稳定","link":"#为什么引入容器后系统变的稳定","children":[]},{"level":2,"title":"Spring IOC的核心机制：实例化与注入","slug":"spring-ioc的核心机制-实例化与注入","link":"#spring-ioc的核心机制-实例化与注入","children":[{"level":3,"title":"常用注解","slug":"常用注解","link":"#常用注解","children":[]}]},{"level":2,"title":"实例化和依赖注入时机与延迟实例化","slug":"实例化和依赖注入时机与延迟实例化","link":"#实例化和依赖注入时机与延迟实例化","children":[]},{"level":2,"title":"DI注入的三种方式","slug":"di注入的三种方式","link":"#di注入的三种方式","children":[]},{"level":2,"title":"@Autowired","slug":"autowired","link":"#autowired","children":[{"level":3,"title":"bytype","slug":"bytype","link":"#bytype","children":[]},{"level":3,"title":"byname","slug":"byname","link":"#byname","children":[]},{"level":3,"title":"@Qualifier","slug":"qualifier","link":"#qualifier","children":[]}]},{"level":2,"title":"面向对象变化中的应对方案","slug":"面向对象变化中的应对方案","link":"#面向对象变化中的应对方案","children":[]},{"level":2,"title":"@Configuration","slug":"configuration","link":"#configuration","children":[{"level":3,"title":"配置的分类","slug":"配置的分类","link":"#配置的分类","children":[]}]},{"level":2,"title":"为什么在bean上添加@Component注解，这个bean就会加到容器中呢？","slug":"为什么在bean上添加-component注解-这个bean就会加到容器中呢","link":"#为什么在bean上添加-component注解-这个bean就会加到容器中呢","children":[]},{"level":2,"title":"对spring-boot的自动装配理解","slug":"对spring-boot的自动装配理解","link":"#对spring-boot的自动装配理解","children":[{"level":3,"title":"@SpringBootApplication注解","slug":"springbootapplication注解","link":"#springbootapplication注解","children":[]},{"level":3,"title":"@SpringBootConfiguration注解","slug":"springbootconfiguration注解","link":"#springbootconfiguration注解","children":[]},{"level":3,"title":"@EnableAutoConfiguration注解","slug":"enableautoconfiguration注解","link":"#enableautoconfiguration注解","children":[]}]},{"level":2,"title":"SPI：Service Provider Interface","slug":"spi-service-provider-interface","link":"#spi-service-provider-interface","children":[]},{"level":2,"title":"SpringBoot主动发现机制","slug":"springboot主动发现机制","link":"#springboot主动发现机制","children":[]},{"level":2,"title":"@ResponseEntity注解","slug":"responseentity注解","link":"#responseentity注解","children":[]},{"level":2,"title":"分类查询功能的实现","slug":"分类查询功能的实现","link":"#分类查询功能的实现","children":[]},{"level":2,"title":"java bean里可不可以写业务逻辑？","slug":"java-bean里可不可以写业务逻辑","link":"#java-bean里可不可以写业务逻辑","children":[]}],"git":{"updatedTime":1698831382000},"filePathRelative":"javaKnowledge/01.md"}');export{l as data};
