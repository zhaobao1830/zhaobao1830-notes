import{_ as a,p as s,q as n,a1 as t}from"./framework-b7c41258.js";const e={},p=t(`<h1 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> mybatis</h1><h2 id="tk-mybatis" tabindex="-1"><a class="header-anchor" href="#tk-mybatis" aria-hidden="true">#</a> tk.mybatis</h2><p>tk.mybatis是基于Mybatis框架开发的一个工具，通过调用它提供的方法实现对单表的数据操作，不需要写任何sql语句，这极大地提高了项目开发效率。</p><h3 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤：</h3><p>1、pom.xml引入tk.mybatis</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、创建通用mapper</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">MySqlMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、在yml中引入通用mapper配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">############################################################</span>
<span class="token comment">#</span>
<span class="token comment"># mybatis mapper 配置</span>
<span class="token comment">#</span>
<span class="token comment">############################################################</span>
<span class="token key atrule">mapper</span><span class="token punctuation">:</span>
  <span class="token key atrule">mappers</span><span class="token punctuation">:</span> com.zb.my.mapper.MyMapper
  <span class="token key atrule">not-empty</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 在进行数据库操作的的时候，判断表达式 username != null, 是否追加 username != &#39;&#39;</span>
  <span class="token key atrule">identity</span><span class="token punctuation">:</span> MYSQL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h3><p>分析MyMapper所继承的父类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">MyMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span><span class="token class-name">MySqlMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里有俩个父类，<code>Mapper&lt;T&gt;和MySqlMapper&lt;T&gt;</code></p><p>先打开<code>MySqlMapper&lt;T&gt;</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">MySqlMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">InsertListMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">InsertUseGeneratedKeysMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里面继承了俩个mapper，从类名上可以看出来，是用于操作数据库的，这俩个类分别包含了如下方法:</p><table><thead><tr><th>方法名</th><th>操作</th><th>备注</th></tr></thead><tbody><tr><td>insertList</td><td>数据批量插入</td><td>主键需自增</td></tr><tr><td>insertUseGeneratedKeys</td><td>插入表数据</td><td>主键需自增</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">备注</p><p>很明显，在传统JavaWeb开发中，这俩个方法使用是没有问题的，但是我们的数据库表主键设计肯定是全局唯一的，不可能 使用自增长id，所以这俩个方法在开发中是不使用的</p></div><p><code>Mapper&lt;T&gt;</code>继承的父类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span><span class="token class-name">ExampleMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span><span class="token class-name">RowBoundsMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>BaseMapper包含的方法</p><table><tr><th>类</th><th>方法</th><th>操作</th></tr><tr><td rowspan="6">BaseSelectMapper</td><td>T selectOne(T rend)</td><td>根据实体类中的属性查询表数据，返回单个实体</td></tr><tr><td>List select(T record)</td><td>根据实体类中的属性查询表数据，返回list</td></tr><tr><td>List selectAll()</td><td>返回该表所有记录</td></tr><tr><td>int selectCount(T record)</td><td>根据条件查询记录数</td></tr><tr><td>T selectByPrimaryKey(Object key)</td><td>根据主键查询单条记录</td></tr><tr><td>boolean existsWithPrimaryKey(Object key)</td><td>查询主键是否存在，返回true或false</td></tr><tr><td rowspan="2">BaseInsetMapper</td><td>int insert(T record)</td><td>插入一条记录，属性为空也会保存</td></tr><tr><td>int insertSelecttive(T record)</td><td>插入一条记录，属性为空不保存，会使用默认值</td></tr><tr><td rowspan="2">BaseUpdateMapper</td><td>int updateByPrimaryKey(T record)</td><td>根据实体类更新数据库，属性有null会覆盖原记录</td></tr><tr><td>int updateByPrimaryKeySelective(T record)</td><td>根据实体类更新数据库，属性有null会忽略</td></tr><tr><td rowspan="2">BaseDeleteMapper</td><td>int delete(T record)</td><td>根据实体类中属性多条件删除记录</td></tr><tr><td>int deleteByPrimaryKey(T record)</td><td>根据主键删除记录</td></tr></table><p><code>ExampleMapper&lt;T&gt;</code>,Example类是用于提供给用户实现自定义条件的，也就是where条件，主要方法见下表格：</p><table><tr><td>SelectByExampleMapper</td><td>List selectByExample(Object example)</td><td>根据条件查询记录list</td></tr><tr><td>SelectOneByExampleMapper</td><td>T selectOneByExample(Object example)</td><td>根据条件查询单条记录</td></tr><tr><td>SelectCountByExampleMapper</td><td>int selectCountByExample(Object example)</td><td>根据条件查询记录数</td></tr><tr><td>DeleteByExampleMapper</td><td>int deleteByExample(Object example)</td><td>根据条件删除记录</td></tr><tr><td>UpdateByExampleMapper</td><td>int updateByExample(T record, @Param(&quot;example&quot;) Object example)</td><td>根据条件更新数据，null会覆盖原数据</td></tr><tr><td>UpdateByExampleSelectiveMapper</td><td>int updateByExampleSelective(T record, Object example)</td><td>根据条件更新数据，null会忽略</td></tr></table><p><code>RowBoundsMapper&lt;T&gt;</code> 分页的</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>通用mapper所提供的的CRUD方法对单表操作，大大提高效率，当然复杂的多表操作还是需要在mapper.xml自己去编写sql代码实现</p>`,28),l=[p];function c(d,o){return s(),n("div",null,l)}const i=a(e,[["render",c],["__file","23.html.vue"]]);export{i as default};
