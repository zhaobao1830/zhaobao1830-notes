const l=JSON.parse('{"key":"v-97c08fea","path":"/javaKnowledge/13.html","title":"泛型","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"泛型本质","slug":"泛型本质","link":"#泛型本质","children":[]},{"level":2,"title":"为什么使用泛型","slug":"为什么使用泛型","link":"#为什么使用泛型","children":[{"level":3,"title":"保证了类型的安全性。","slug":"保证了类型的安全性。","link":"#保证了类型的安全性。","children":[]},{"level":3,"title":"消除强制转换","slug":"消除强制转换","link":"#消除强制转换","children":[]},{"level":3,"title":"避免了不必要的装箱、拆箱操作，提高程序的性能","slug":"避免了不必要的装箱、拆箱操作-提高程序的性能","link":"#避免了不必要的装箱、拆箱操作-提高程序的性能","children":[]},{"level":3,"title":"提高了代码的重用性。","slug":"提高了代码的重用性。","link":"#提高了代码的重用性。","children":[]}]},{"level":2,"title":"如何使用泛型","slug":"如何使用泛型","link":"#如何使用泛型","children":[{"level":3,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":3,"title":"泛型接口","slug":"泛型接口","link":"#泛型接口","children":[]},{"level":3,"title":"泛型方法","slug":"泛型方法","link":"#泛型方法","children":[]}]},{"level":2,"title":"泛型通配符","slug":"泛型通配符","link":"#泛型通配符","children":[{"level":3,"title":"无边界的通配符(Unbounded Wildcards), 就是<?>, 比如List<?>","slug":"无边界的通配符-unbounded-wildcards-就是-比如list","link":"#无边界的通配符-unbounded-wildcards-就是-比如list","children":[]},{"level":3,"title":"固定上边界的通配符(Upper Bounded Wildcards)，采用<? extends E>的形式","slug":"固定上边界的通配符-upper-bounded-wildcards-采用-extends-e-的形式","link":"#固定上边界的通配符-upper-bounded-wildcards-采用-extends-e-的形式","children":[]},{"level":3,"title":"固定下边界的通配符(Lower Bounded Wildcards)，采用<? super E>的形式","slug":"固定下边界的通配符-lower-bounded-wildcards-采用-super-e-的形式","link":"#固定下边界的通配符-lower-bounded-wildcards-采用-super-e-的形式","children":[]}]},{"level":2,"title":"泛型中K、T、V、E的含义","slug":"泛型中k、t、v、e的含义","link":"#泛型中k、t、v、e的含义","children":[{"level":3,"title":"常见泛型参数名称有如下：","slug":"常见泛型参数名称有如下","link":"#常见泛型参数名称有如下","children":[]}]},{"level":2,"title":"泛型的实现原理","slug":"泛型的实现原理","link":"#泛型的实现原理","children":[]}],"git":{"updatedTime":1687247339000},"filePathRelative":"javaKnowledge/13.md"}');export{l as data};
