import{_ as a,o as e,c as t,R as r}from"./chunks/framework.1nBpG9uI.js";const h=JSON.parse('{"title":"SVG","description":"","frontmatter":{},"headers":[],"relativePath":"dataVisualizationKnowledge/04.md","filePath":"dataVisualizationKnowledge/04.md","lastUpdated":1709103772000}'),o={name:"dataVisualizationKnowledge/04.md"},n=r('<h1 id="svg" tabindex="-1">SVG <a class="header-anchor" href="#svg" aria-label="Permalink to &quot;SVG&quot;">​</a></h1><p>SVG 的全称是 Scalable Vector Graphics，可缩放矢量图，它是浏览器支持的一种基于 XML 语法的图像格式。</p><p>描述 SVG 的 XML 语言本身和 HTML 非常接近，都是由标签 + 属性构成的，而且浏览器的 CSS、JavaScript 都能够正常作用于 SVG 元素</p><p><strong>SVG 就是 HTML 的增强版</strong></p><p>对于可视化来说，SVG 是非常重要的图形系统。它既可以用 JavaScript 操作绘制各种几何图形，还可以作为浏览器支持的一种图片格式，来 独立使用 img 标签加载或者通过 Canvas 绘制。即使我们选择使用 HTML 和 CSS、Canvas2D 或者 WebGL 的方式来实现可视化，但我们依然可以且很有可能会使用到 SVG 图像。</p><p>SVG 作为一种浏览器支持的图像格式，既可以作为 HTML 内嵌元素使用，也可以作为图像通过 img 元素加载，或者绘制到 Canvas 内。</p><p>用 SVG 绘制可视化图形与用 Canvas 绘制有明显区别，SVG 通过创建标签来表示图形元素，然后将图形元素添加到 DOM 树中，交给 DOM 完成渲染。</p><p>使用 DOM 树渲染可以让图形元素的用户交互实现起来非常简单，因为我们可以直接对图形元素注册事件。但是这也带来问题，如果图形复杂，那么 SVG 的图形元素会非常多，这会导致 DOM 树渲染成为性能瓶颈。</p><h2 id="参考文章-如何用svg图形元素绘制可视化图表" tabindex="-1">参考文章：<a href="https://time.geekbang.org/column/article/252710" target="_blank" rel="noreferrer">如何用SVG图形元素绘制可视化图表？</a> <a class="header-anchor" href="#参考文章-如何用svg图形元素绘制可视化图表" aria-label="Permalink to &quot;参考文章：[如何用SVG图形元素绘制可视化图表？](https://time.geekbang.org/column/article/252710)&quot;">​</a></h2>',9),s=[n];function i(c,l,p,_,d,S){return e(),t("div",null,s)}const g=a(o,[["render",i]]);export{h as __pageData,g as default};
