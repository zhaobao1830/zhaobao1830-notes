import{_ as p,M as o,p as c,q as l,R as a,t as e,N as t,a1 as n}from"./framework-b7c41258.js";const i={},r=n('<h1 id="图片" tabindex="-1"><a class="header-anchor" href="#图片" aria-hidden="true">#</a> 图片</h1><h2 id="图片预览的方式" tabindex="-1"><a class="header-anchor" href="#图片预览的方式" aria-hidden="true">#</a> 图片预览的方式</h2><p>不要等上传完毕再显示，需要一种快速本地预览图片的方法</p><h3 id="url-createobjecturl" tabindex="-1"><a class="header-anchor" href="#url-createobjecturl" aria-hidden="true">#</a> URL.createObjectURL()</h3>',4),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL",target:"_blank",rel:"noopener noreferrer"},d=a("li",null,[a("p",null,"一个静态方法，创建一个DOMString，返回一个URL，URL和document绑定，表示指定的File对象")],-1),k=n(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>url <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>File对象<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="filereader-readasdataurl" tabindex="-1"><a class="header-anchor" href="#filereader-readasdataurl" aria-hidden="true">#</a> FileReader.readAsDataURL()</h3>`,2),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/readAsDataURL",target:"_blank",rel:"noopener noreferrer"},v=a("li",null,[a("p",null,"一FileReader上面的实例方法，读取指定的File对象，读取完成偶调用回调，返回URL格式的字符串（base64）")],-1),m=n(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>uploadedFile<span class="token punctuation">)</span>
fileReader<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  fileObj<span class="token punctuation">.</span>url <span class="token operator">=</span> fileReader<span class="token punctuation">.</span>result <span class="token keyword">as</span> string
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h3><p>1、返回值</p><p>(1)、FileReader.readAsDataURL(flie)返回的是base64的字符串</p><p>(2)、URL.createObjectURL(file)返回的是当前文件的内存url</p><p>2、执行机制</p><p>(1)、FileReader.readAsDataURL(flie)通过回调的形式返回，异步执行</p><p>(2)、URL.createObjectURL(file)直接返回，同步执行</p><p>3、内存清理</p><p>(1)、FileReader.readAsDataURL(flie)按照JS垃圾回收机制自动从内存中清理</p><p>(2)、URL.createObjectURL(file)存在于当前docmount内，清除方式只有unload()事件或revokeObjectURL()手动清除</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>1、URL.createObjectURL(file)得到本地内存容器的URL地址，同步使用，比较方便快捷，多次使用需要注意手动释放内存的问题，性能优秀</p><p>2、FileReader.readAsDataURL(flie)胜在直接转为base64格式，可以直接用于业务，无序二次转换</p><h2 id="动态计算图片宽和高" tabindex="-1"><a class="header-anchor" href="#动态计算图片宽和高" aria-hidden="true">#</a> 动态计算图片宽和高</h2><p>有时候我们需要动态的设置图片的宽和高样式</p><p>可以这样做，图片加载完成后，会触发load方法，此方法里有个event参数，通过event.detail可以获取图片的宽高属性</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name"><span class="token namespace">bind:</span>load</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onImgLoad<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token selector">width:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>w<span class="token punctuation">}</span><span class="token punctuation">}</span>rpx<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>h<span class="token punctuation">}</span><span class="token punctuation">}</span>rpx<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{data.img}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token function">onImgLoad</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span>width<span class="token punctuation">,</span> height<span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>detail
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">w</span><span class="token operator">:</span> <span class="token number">340</span><span class="token punctuation">,</span>
        <span class="token literal-property property">h</span><span class="token operator">:</span> <span class="token number">340</span><span class="token operator">*</span>height<span class="token operator">/</span>width
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">备注</p><p>这是微信小程序里的写法，H5页面获取图片的属性方法类似</p></div>`,20);function b(g,R){const s=o("ExternalLinkIcon");return c(),l("div",null,[r,a("ul",null,[a("li",null,[a("p",null,[a("a",u,[e("文档地址"),t(s)])])]),d]),k,a("ul",null,[a("li",null,[a("p",null,[a("a",h,[e("文档地址"),t(s)])])]),v]),m])}const L=p(i,[["render",b],["__file","image.html.vue"]]);export{L as default};
