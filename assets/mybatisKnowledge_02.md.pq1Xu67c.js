import{_ as s,o as a,c as e,R as n}from"./chunks/framework.1nBpG9uI.js";const h=JSON.parse('{"title":"mybatis传递多个参数","description":"","frontmatter":{},"headers":[],"relativePath":"mybatisKnowledge/02.md","filePath":"mybatisKnowledge/02.md","lastUpdated":1717056127000}'),p={name:"mybatisKnowledge/02.md"},l=n(`<h1 id="mybatis传递多个参数" tabindex="-1">mybatis传递多个参数 <a class="header-anchor" href="#mybatis传递多个参数" aria-label="Permalink to &quot;mybatis传递多个参数&quot;">​</a></h1><h2 id="顺序传参法" tabindex="-1">顺序传参法 <a class="header-anchor" href="#顺序传参法" aria-label="Permalink to &quot;顺序传参法&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>public User selectUser(String name, int deptId);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;select id=&quot;selectUser&quot; resultMap=&quot;UserResultMap&quot;&gt;</span></span>
<span class="line"><span>    select * from user</span></span>
<span class="line"><span>    where user_name = #{0} and dept_id = #{1}</span></span>
<span class="line"><span>&lt;/select&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>#{}里面的数字代表你传入参数的顺序。</p><p>这种方法不建议使用，sql层表达不直观，且一旦顺序调整容易出错。</p><p><strong>这种传参方式没有使用过</strong></p><h2 id="param注解传参法" tabindex="-1">@Param注解传参法 <a class="header-anchor" href="#param注解传参法" aria-label="Permalink to &quot;@Param注解传参法&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>public User selectUser(@Param(&quot;userName&quot;) String name, int @Param(&quot;deptId&quot;) deptId);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;select id=&quot;selectUser&quot; resultMap=&quot;UserResultMap&quot;&gt;</span></span>
<span class="line"><span>    select * from user</span></span>
<span class="line"><span>    where user_name = #{userName} and dept_id = #{deptId}</span></span>
<span class="line"><span>&lt;/select&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>#{}里面的名称对应的是注解@Param括号里面修饰的名称。</p><p>这种方法在参数不多的情况还是比较直观的，推荐使用。</p><p><strong>这种传参方式使用的多</strong></p><h2 id="map传参法" tabindex="-1">Map传参法 <a class="header-anchor" href="#map传参法" aria-label="Permalink to &quot;Map传参法&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>public User selectUser(Map&lt;String, Object&gt; params);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;select id=&quot;selectUser&quot; parameterType=&quot;java.util.Map&quot; resultMap=&quot;UserResultMap&quot;&gt;</span></span>
<span class="line"><span>    select * from user</span></span>
<span class="line"><span>    where user_name = #{userName} and dept_id = #{deptId}</span></span>
<span class="line"><span>&lt;/select&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>#{}里面的名称对应的是Map里面的key名称。</p><p>这种方法适合传递多个参数，且参数易变能灵活传递的情况。</p><p>PS: MyBatis传递map参数时，如果传递参数中没有对应的key值，在执行sql语句时默认取的是null</p><p>例如：map中没有put “name”这个key，在sql中使用#{name}时，默认赋值null</p><p><strong>这种传参方式没有使用过</strong></p><h2 id="java-bean传参法" tabindex="-1">Java Bean传参法 <a class="header-anchor" href="#java-bean传参法" aria-label="Permalink to &quot;Java Bean传参法&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>public User selectUser(User params);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;select id=&quot;selectUser&quot; parameterType=&quot;com.test.User&quot; resultMap=&quot;UserResultMap&quot;&gt;</span></span>
<span class="line"><span>    select * from user</span></span>
<span class="line"><span>    where user_name = #{userName} and dept_id = #{deptId}</span></span>
<span class="line"><span>&lt;/select&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>#{}里面的名称对应的是User类里面的成员属性。</p><p>这种方法很直观，但需要建一个实体类，扩展不容易，需要加属性，看情况使用。</p><p><strong>这种传参方式常用在新增和更新表方法中</strong></p>`,23),t=[l];function r(i,c,u,o,d,m){return a(),e("div",null,t)}const g=s(p,[["render",r]]);export{h as __pageData,g as default};
