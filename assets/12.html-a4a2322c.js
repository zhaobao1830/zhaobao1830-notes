import{_ as n,p as a,q as s,a1 as e}from"./framework-b7c41258.js";const t="/zhaobao1830-notes/assets/01-8296c836.png",p={},i=e('<h1 id="vue组件之间的通信方式有哪些" tabindex="-1"><a class="header-anchor" href="#vue组件之间的通信方式有哪些" aria-hidden="true">#</a> Vue组件之间的通信方式有哪些？</h1><h2 id="组件间通信的概念" tabindex="-1"><a class="header-anchor" href="#组件间通信的概念" aria-hidden="true">#</a> 组件间通信的概念</h2><p>我们把<strong>组件间通信</strong>进行拆分：</p><ul><li><p>组件</p></li><li><p>通信</p></li></ul><p>组件是<code>vue</code>最强大的功能之一，<code>vue</code>中每一个<code>.vue</code>我们都可以视为一个组件。</p><p>通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的。</p><p>组件间通信即指组件（<code>.vue</code>）通过某种方式来传递信息以达到某个目的。</p><p>举个例子，我们在使用<code>UI</code>库中的<code>List</code>组件，会往<code>List</code>组件中传递某个信息，这本质上就形成了组件之间的通信</p><h2 id="组件间通信解决了什么" tabindex="-1"><a class="header-anchor" href="#组件间通信解决了什么" aria-hidden="true">#</a> 组件间通信解决了什么</h2><p>通信的本质是信息同步。</p><p><code>vue</code>中，每个组件之间都有独自的作用域，组件间的数据是无法共享的，但实际开发工作中我们常常需要让组件之间共享数据，这也是</p><p>组件通信的目的，让它们相互之间能进行通信，这也才能构成一个有机的完整系统</p><h2 id="组件间通信的方案" tabindex="-1"><a class="header-anchor" href="#组件间通信的方案" aria-hidden="true">#</a> 组件间通信的方案</h2><h3 id="props传递数据" tabindex="-1"><a class="header-anchor" href="#props传递数据" aria-hidden="true">#</a> props传递数据</h3><p><img src="'+t+`" alt="Image text"></p><ul><li>适用场景：父组件传递数据给子组件</li><li>子组件设置<code>props</code>属性，接收父组件传递过来的参数</li></ul><p><code>Children.vue</code>组件</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>props: {
  item: {
    type: Object,
    default() {
      return {}
    }
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Father.vue</code>组件</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Children</span> <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="emit触发自定义事件" tabindex="-1"><a class="header-anchor" href="#emit触发自定义事件" aria-hidden="true">#</a> $emit触发自定义事件</h3><ul><li>适用场景：子组件传递数据给父组件</li><li>子组件通过<code>$emit</code>触发自定义事件，<code>$emit</code>第一个参数是父组件接收的方法名，第二个参数</li></ul><p>Children.vue</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>this.$emit(&#39;add&#39;, good)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Father.vue</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Children</span> <span class="token attr-name">@add</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cartAdd<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> ref</h3><ul><li>父组件在使用子组件的时候设置<code>ref</code></li><li>父组件通过子组件的<code>ref</code>来获取数据</li></ul><p>Father.vue</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Children</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>childrenRef<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

this.$refs.childrenRef // 获取子组件实例，通过这个实例可以获取子组件的数据、方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="eventbus" tabindex="-1"><a class="header-anchor" href="#eventbus" aria-hidden="true">#</a> EventBus</h3><ul><li>使用场景：兄弟组件传值</li><li>创建一个中央事件总线<code>EventBus</code></li><li>兄弟组件通过<code>$emit</code>触发自定义事件，<code>$emit</code>第二个参数为传递的值</li><li>另一个兄弟组件通过<code>$on</code>监听自定义事件</li></ul><p>Bus.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个中央事件总线类</span>
<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 存放事件的名字</span>
  <span class="token punctuation">}</span>
  <span class="token function">$on</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">$emit</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// main.js </span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将$bus挂载到vue实例的原型上</span>
<span class="token comment">// </span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Vue已经实现了Bus的功能</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Children1.vue</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>this.$bus.$emit(&#39;foo&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Children2.vue</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>this.$bus.$on(&#39;foo&#39;, this.handle)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="parent、root" tabindex="-1"><a class="header-anchor" href="#parent、root" aria-hidden="true">#</a> parent、root</h3><ul><li>通过共同祖辈<code>$parent</code>或者<code>$root</code>搭建通信桥梁</li></ul><p>兄弟组件</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>this.$parent.on(&#39;add&#39;, this.add)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一个兄弟组件</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>this.$parent.emit(&#39;add&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="attrs与listeners" tabindex="-1"><a class="header-anchor" href="#attrs与listeners" aria-hidden="true">#</a> attrs与listeners</h3><ul><li>适用场景：祖先传递数据给子孙</li><li>设置批量向下传属性<code>$attrs</code>和<code>$listeners</code></li><li>包含了父级作用域中不作为prop被识别（且获取）的特性绑定（class和style除外）</li><li>可以通过<code>v-bind=&quot;$attrs&quot;</code>传入内部</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// child：并未在props中申明foo 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{$attrs.foo}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> 
 
// parent 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 给Grandson隔代传值，communication/index.vue 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child2</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lalala<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@some-event</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onSomeEvent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child2</span><span class="token punctuation">&gt;</span></span> 
 
// Child2做展开
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grandson</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$attrs<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$listeners<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grandson</span><span class="token punctuation">&gt;</span></span> 
 
// Grandson使用
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;some-event&#39;, &#39;msg from grandson&#39;)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
{{msg}} 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="provide与inject" tabindex="-1"><a class="header-anchor" href="#provide与inject" aria-hidden="true">#</a> provide与inject</h3><ul><li>在祖先组件定义<code>provide</code>属性，返回传递的值</li><li>在后代组件通过<code>inject</code>接收组件传递过来的值</li></ul><p>祖先组件</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>provide(){
  return {
    foo:&#39;foo&#39;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后代组件</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>inject:[&#39;foo&#39;] // 获取到祖先组件传递过来的值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="vuex或pinia" tabindex="-1"><a class="header-anchor" href="#vuex或pinia" aria-hidden="true">#</a> vuex或pinia</h3><ul><li>适用场景：复杂关系的组件数据传递</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我项目里父子组件数据通信用props和emit，除此以外组件数据通信用vuex或pinia。</p>`,58),c=[i];function l(o,u){return a(),s("div",null,c)}const r=n(p,[["render",l],["__file","12.html.vue"]]);export{r as default};
