import{_ as e,M as o,p as c,q as i,R as n,t as s,N as p,a1 as t}from"./framework-b7c41258.js";const l={},u=t('<h1 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h1><p>Java注解又称Java标注，是在 JDK5 时引入的新特性，注解（也被称为元数据）。</p><p>Java注解它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。</p><p>Java注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。</p><div class="custom-container tip"><p class="custom-container-title">备注</p><p>注解就是告诉编译器, 这段代码是干嘛的</p></div><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><ul><li><p>提供信息给编译器：注解可以提供一些额外的信息给编译器，使得编译器在编译过程中可以对代码进行检查或处理。例如，@Override注解用于指示方法应该覆盖父类中的方法，如果没有正确覆盖，编译器会产生警告或错误。</p></li><li><p>编译时代码生成：注解可以用于在编译时生成代码。例如，Lombok库使用注解来生成getter、setter和构造函数等代码。通过这种方式，开发者可以减少样板代码的编写，提高代码的可读性和可维护性。</p></li><li><p>运行时处理：注解可以在运行时被读取和处理，从而改变程序的行为。许多框架和库使用注解来配置和管理程序的运行时行为。例如，Spring框架中的@Autowired注解用于自动注入依赖，而JPA（Java Persistence API）使用注解来定义实体类和表之间的映射关系。</p></li><li><p>代码文档和辅助：注解可以作为一种在代码中提供额外信息的方式，帮助开发者了解代码的用途和行为。这可以提高代码的可读性和可维护性。例如，JUnit测试框架使用@Test注解来标识测试方法。</p></li></ul><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><h3 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h3><p><strong>@Override</strong>：子类重写父类的方法</p><p><strong>@Autowired</strong>：自动创配，IOC容器将对象注入到使用的代码里</p><div class="custom-container tip"><p class="custom-container-title">备注</p><p>如果一个类没有加@Conponent注解，就不会被加入到IOC容器里，当然也不能通过@Autowired注入到代码中，不然会报错</p><p>可以通过@Autowired(required = false)注入到代码里</p><p>这样编写代码的时候不会报错，但执行方法的时候会报错</p></div><p><strong>@Validated</strong>：开启校验</p><p><strong>@Valid</strong>：级联校验，当对象参数的类里，有其他对象的属性，就需要在级联的对象上添加@Valid，这样才能校验级联对象里的属性</p><p><strong>@RestController</strong>：复合注解，包含@Controller和@ResponseBody</p><p><strong>@Controller</strong></p><p><strong>Service</strong></p><p><strong>@Component</strong>：类上加了这个注解，这个类就会被SpringBoot扫描后加入到容器里，在需要的时候注入到其他类中</p><p><strong>@Configuration</strong>：配置类，常与@bean一起用。可替换xml配置文件，被注解的类内部包含有一个或 多个 被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。</p>',19),r=n("strong",null,"@SpringBootApplication",-1),k={href:"https://zhaobao1830.github.io/zhaobao1830-notes/javaKnowledge/01.html#%E5%AF%B9spring-boot%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E7%90%86%E8%A7%A3",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,[n("strong",null,"@ConfigurationProperties"),s("：用于将外部配置属性绑定到java类中的字段或方法上。通过使用该注解，可以方便地从配置文件（exception-code.properties或application.yml）获取配置")],-1),m={href:"https://github.com/zhaobao1830/misscmszb",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zb<span class="token punctuation">.</span>misscmszb<span class="token punctuation">.</span>module<span class="token punctuation">.</span>file</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>zb<span class="token punctuation">.</span>misscmszb<span class="token punctuation">.</span>common<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">YamlPropertySourceFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PropertySource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;cms.file&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;classpath:com/zb/misscmszb/extension/file/config/config.yml&quot;</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">,</span> factory <span class="token operator">=</span> <span class="token class-name">YamlPropertySourceFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileConfiguration</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">DEFAULT_EMPTY_ARRAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> storeDir <span class="token operator">=</span> <span class="token string">&quot;/assets&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> singleLimit <span class="token operator">=</span> <span class="token string">&quot;2MB&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> nums <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> domain<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exclude <span class="token operator">=</span> <span class="token constant">DEFAULT_EMPTY_ARRAY</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> include <span class="token operator">=</span> <span class="token constant">DEFAULT_EMPTY_ARRAY</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 文件存储路径
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> servePath <span class="token operator">=</span> <span class="token string">&quot;assets/**&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> servePath<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setServePath</span><span class="token punctuation">(</span><span class="token class-name">String</span> servePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>servePath <span class="token operator">=</span> servePath<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStoreDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> storeDir<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStoreDir</span><span class="token punctuation">(</span><span class="token class-name">String</span> storeDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>storeDir <span class="token operator">=</span> storeDir<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSingleLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> singleLimit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSingleLimit</span><span class="token punctuation">(</span><span class="token class-name">String</span> singleLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>singleLimit <span class="token operator">=</span> singleLimit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNums</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nums <span class="token operator">=</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getExclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> exclude<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setExclude</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exclude<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>exclude <span class="token operator">=</span> exclude<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getInclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> include<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> include<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>include <span class="token operator">=</span> include<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> domain<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDomain</span><span class="token punctuation">(</span><span class="token class-name">String</span> domain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>domain <span class="token operator">=</span> domain<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>YamlPropertySourceFactory 重新指定属性源</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zb<span class="token punctuation">.</span>misscmszb<span class="token punctuation">.</span>common<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">YamlPropertySourceLoader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">PropertySource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">PropertySources</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">EncodedResource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">PropertySourceFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YamlPropertySourceFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PropertySourceFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">createPropertySource</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">EncodedResource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertySource</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> sources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YamlPropertySourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sources<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">备注</p><p>默认情况下，我们只能获取properties里的配置，如果想获取yml里的配置，就需要在文件上添加@PropertySource注解，重新指定factory</p><p>PropertySourceFactory是Spring框架中的一个接口，用于自定义加载和解析外部属性源（property source）的策略</p><p>PropertySourceFactory接口定义了一个方法org.springframework.core.env.PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) throws IOException，该方法根据给定的属性源名称和资源来创建PropertySource对象。</p><p>自定义PropertySourceFactory时，需要实现PropertySourceFactory接口，并重写createPropertySource方法。在这个方法中，你可以根据自己的需求，加载和解析外部属性源，并将其包装成PropertySource对象返回。</p></div><h3 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解" aria-hidden="true">#</a> 元注解</h3><p>是用于修饰注解的注解，通常用在注解的定义上</p><p><strong>@Retention:</strong> 作用是定义被它所注解的注解保留多久，一共有三种策略，定义在RetentionPolicy枚举中.</p><p>source：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；被编译器忽略</p><p>class：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期</p><p>runtime：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在</p><p>这3个生命周期分别对应于：Java源文件(.java文件) ---&gt; .class文件 ---&gt; 内存中的字节码。</p><p><strong>@Documented</strong>：生成文档信息的时候保留注解，对类作辅助说明</p><p><strong>@Target</strong>：指明了修饰的这个注解的使用范围，即把被修饰的注解用在哪里</p><p>ElementType的取值包含以下几种：</p><ul><li><p>TYPE:类，接口或者枚举</p></li><li><p>FIELD:域，包含枚举常量</p></li><li><p>METHOD:方法</p></li><li><p>PARAMETER:参数</p></li><li><p>CONSTRUCTOR:构造方法</p></li><li><p>LOCAL_VARIABLE:局部变量</p></li><li><p>ANNOTATION_TYPE:注解类型</p></li><li><p>PACKAGE:包</p></li></ul><p><strong>@Constraint</strong>：自定义注解的时候用，表示具体的实现类是哪个</p><h3 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解" aria-hidden="true">#</a> 自定义注解</h3><p>自己根据业务需求，定义的注解</p>`,18),b={href:"https://zhaobao1830.github.io/zhaobao1830-notes/javaKnowledge/09.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3",target:"_blank",rel:"noopener noreferrer"};function g(y,w){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[r,s("：表明当前类是"),n("a",k,[s("SpringBoot项目的启动类"),p(a)])]),d,n("p",null,[s("项目参考地址："),n("a",m,[s("misscmszb项目下的FileConfiguration文件"),p(a)])]),v,n("p",null,[s("具体的可以查看"),n("a",b,[s("自定义密码校验注解"),p(a)])])])}const f=e(l,[["render",g],["__file","12.html.vue"]]);export{f as default};
