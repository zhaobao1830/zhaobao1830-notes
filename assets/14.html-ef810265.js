import{_ as n,p as s,q as a,a1 as t}from"./framework-b7c41258.js";const p={},e=t(`<h1 id="optional" tabindex="-1"><a class="header-anchor" href="#optional" aria-hidden="true">#</a> Optional</h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>Optional是Java 8引入的一个类，用于解决空指针异常的问题。它可以包装一个可能为空的值，并提供了一些方法来处理这个值。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptionalExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 使用ofNullable方法创建一个Optional对象</span>

        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> optionalStr <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 使用isPresent方法判断Optional对象是否包含非空值</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>optionalStr<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;str的值为：&quot;</span> <span class="token operator">+</span> optionalStr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;str为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 使用orElse方法获取Optional对象中的值，如果为空则返回默认值</span>

        <span class="token class-name">String</span> result <span class="token operator">=</span> optionalStr<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;默认值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result的值为：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 使用ifPresent方法在Optional对象包含非空值时执行某个操作</span>

        optionalStr<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;str的长度为：&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们首先使用Optional.ofNullable()方法创建了一个Optional对象，然后使用isPresent()方法判断Optional对象是否包含非空值。如果包含非空值，则使用get()方法获取该值；否则，输出&quot;str为空&quot;。</p><p>接下来，我们使用orElse()方法获取Optional对象中的值，如果为空则返回默认值。最后，我们使用ifPresent()方法在Optional对象包含非空值时执行某个操作，这里我们输出了字符串的长度。</p><div class="custom-container tip"><p class="custom-container-title">备注</p><p>使用Optional并不是一定比显式地进行空值检查更好。在某些情况下，过度使用Optional可能会导致代码变得复杂和难以理解。因此，在使用Optional时需要根据具体情况进行权衡和选择。</p></div><h2 id="精髓" tabindex="-1"><a class="header-anchor" href="#精髓" aria-hidden="true">#</a> 精髓</h2><ul><li><p>1、Optional并不是消除了空值错误，而是为了让程序在获取值的时候就判断空指针；</p></li><li><p>2、Optional使得隐藏性错误（空指针）尽早被发现，避免随着函数调用栈越来越深，风险越来越大。</p></li></ul><h2 id="常用的方法" tabindex="-1"><a class="header-anchor" href="#常用的方法" aria-hidden="true">#</a> 常用的方法</h2><ul><li><p>Optional.empty()： 创建一个空的 Optional 实例</p></li><li><p>Optional.of(T t)：创建一个 Optional 实例，当 t为null时抛出异常</p></li><li><p>Optional.ofNullable(T t)：创建一个 Optional 实例，当t为null时不会抛出异常，而是返回一个空的实例</p></li><li><p>isPresent()：判断optional是否为空，如果空则返回false，否则返回true</p></li><li><p>ifPresent(Consumer c)：如果optional不为空，则将optional中的对象传给Comsumer函数</p></li><li><p>orElse(T other)：如果optional不为空，则返回optional中的对象；如果为null，则返回 other 这个默认值</p></li><li><p><code>orElseGet(Supplier&lt;T&gt; other)</code>：如果optional不为空，则返回optional中的对象；如果为null，则使用Supplier函数生成默认值other</p></li><li><p><code>orElseThrow(Supplier&lt;X&gt; exception)</code>：如果optional不为空，则返回optional中的对象；如果为null，则抛出Supplier函数生成的异常</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/name/{name}/with_spu&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Theme</span> <span class="token function">getThemeByNameWithSpu</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> themeName<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Theme</span><span class="token punctuation">&gt;</span></span> optionalTheme <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>themeService<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>themeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> optionalTheme<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">(</span><span class="token number">30003</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[e];function l(c,i){return s(),a("div",null,o)}const r=n(p,[["render",l],["__file","14.html.vue"]]);export{r as default};
