import{_ as t,M as p,p as o,q as c,R as n,t as a,N as i,a1 as s}from"./framework-b7c41258.js";const l={},r=s(`<h1 id="jackson" tabindex="-1"><a class="header-anchor" href="#jackson" aria-hidden="true">#</a> Jackson</h1><p>Jackson是SpringBoot自带的序列化框架，所以不用安装依赖就可以使用</p><h2 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h2><p><strong>@JsonIgnore</strong>：可用于字段、getter/setter、构造函数参数上，作用相同，都会对相应的字段产生影响。使相应字段不参与序列化和反序列化</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>有时候jackson的默认配置不满足需求，我们就可以自定义配置</p><p>jackson自定义配置有俩种：yml配置和自定义ObjectMapper的bean</p><h3 id="yml配置" tabindex="-1"><a class="header-anchor" href="#yml配置" aria-hidden="true">#</a> yml配置</h3><p>application.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>
    <span class="token comment"># 前端传递的参数，在对象里没有定义，false不会序列化，true会序列化（报错，提示对象里没有定义）</span>
    <span class="token key atrule">deserialization</span><span class="token punctuation">:</span>
      <span class="token key atrule">fail-on-unknown-properties</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment"># 变量名以下划线形式展示</span>
    <span class="token comment"># 前端传递的参数和返回的数据都是下划线形式</span>
    <span class="token key atrule">property-naming-strategy</span><span class="token punctuation">:</span> SNAKE_CASE
    <span class="token comment"># 日期返回时间戳</span>
    <span class="token key atrule">serialization</span><span class="token punctuation">:</span>
      <span class="token key atrule">write-dates-as-timestamps</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">备注</p><p>如果property-naming-strategy设置为SNAKE_CASE，那么<strong>前端传入的参数必须是下划线形式</strong>，如果是驼峰形式，后端是接收不到的</p></div><h3 id="自定义objectmapper的bean" tabindex="-1"><a class="header-anchor" href="#自定义objectmapper的bean" aria-hidden="true">#</a> 自定义ObjectMapper的bean</h3>`,12),u={href:"https://github.com/zhaobao1830/misszb",target:"_blank",rel:"noopener noreferrer"},d=s(`<p>CommonConfiguration.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonConfiguration</span> <span class="token punctuation">{</span>
<span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Jackson2ObjectMapperBuilderCustomizer</span> <span class="token function">customJackson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> jacksonObjectMapperBuilder <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 前端传递的参数，在对象里没有定义，false不会序列化，true会序列化（报错，提示对象里没有定义）</span>
            jacksonObjectMapperBuilder<span class="token punctuation">.</span><span class="token function">failOnUnknownProperties</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 返回的属性驼峰转换为小写加下划线</span>
            jacksonObjectMapperBuilder<span class="token punctuation">.</span><span class="token function">propertyNamingStrategy</span><span class="token punctuation">(</span><span class="token class-name">PropertyNamingStrategies</span><span class="token punctuation">.</span><span class="token constant">SNAKE_CASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">备注</p><p>我一般用yml配置，因为简单</p><p>第二种方式没怎么用过，不了解这种方式的优点</p><p>一个项目里俩种方式都有的话，第二种会覆盖第一种</p></div>`,3);function k(m,v){const e=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[a("项目地址："),n("a",u,[a("misscmszb"),i(e)])]),d])}const h=t(l,[["render",k],["__file","11.html.vue"]]);export{h as default};
