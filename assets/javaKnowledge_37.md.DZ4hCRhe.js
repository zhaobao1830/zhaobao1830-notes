import{_ as s,o as i,c as n,R as e}from"./chunks/framework.1nBpG9uI.js";const p="/zhaobao1830-notes/assets/06.ccaPuQEs.png",t="/zhaobao1830-notes/assets/01.nTAARTnf.png",l="/zhaobao1830-notes/assets/02.neIUa8IS.png",a="/zhaobao1830-notes/assets/03.mME1r-PT.png",r="/zhaobao1830-notes/assets/04.Eo8yUCeU.png",v=JSON.parse('{"title":"java项目打包部署","description":"","frontmatter":{},"headers":[],"relativePath":"javaKnowledge/37.md","filePath":"javaKnowledge/37.md","lastUpdated":1752046959000}'),h={name:"javaKnowledge/37.md"},o=e('<h1 id="java项目打包部署" tabindex="-1">java项目打包部署 <a class="header-anchor" href="#java项目打包部署" aria-label="Permalink to &quot;java项目打包部署&quot;">​</a></h1><h2 id="jar和war对比" tabindex="-1">jar和war对比 <a class="header-anchor" href="#jar和war对比" aria-label="Permalink to &quot;jar和war对比&quot;">​</a></h2><h3 id="打包方式" tabindex="-1">打包方式 <a class="header-anchor" href="#打包方式" aria-label="Permalink to &quot;打包方式&quot;">​</a></h3><p>jar文件是将所有的资源文件和Java类文件打包成一个jar文件</p><p>war文件则是将Web应用程序的所有资源文件和Java类文件打包成一个war文件</p><h3 id="部署方式" tabindex="-1">部署方式 <a class="header-anchor" href="#部署方式" aria-label="Permalink to &quot;部署方式&quot;">​</a></h3><p>jar文件部署需要当前服务器有java环境就可以，在cmd中，切换到jar包所在目录，执行命令 java -jar xxx.jar</p><p>war需要放到tomcat的webapps文件夹，启动tomcat进行部署</p><h3 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><p>jar适用于适用前后端分离项目，项目里只包含java相关代码，springCloud微服务项目打包的都是jar包</p><p>war适用于包含web代码的项目，比如jsp、html</p><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p>1、<code>Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date]</code></p><p>Maven打包项目的时候，会进行代码测试，测试不通过就会报上面的错误，解决办法是：点击右上角的关闭测试按钮</p><p><img src="'+p+'" alt="Image text"></p><h2 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-label="Permalink to &quot;打包&quot;">​</a></h2><h3 id="普通java项目" tabindex="-1">普通java项目 <a class="header-anchor" href="#普通java项目" aria-label="Permalink to &quot;普通java项目&quot;">​</a></h3><h4 id="war" tabindex="-1">war <a class="header-anchor" href="#war" aria-label="Permalink to &quot;war&quot;">​</a></h4><p>1、在pom.xml里添加packaging</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packaging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;war&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packaging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2、点击项目运行按钮，运行完成后打开target文件夹，找到项目名.war文件</p><p><img src="'+t+`" alt="Image text"></p><h3 id="springboot项目" tabindex="-1">springBoot项目 <a class="header-anchor" href="#springboot项目" aria-label="Permalink to &quot;springBoot项目&quot;">​</a></h3><h4 id="war-1" tabindex="-1">war <a class="header-anchor" href="#war-1" aria-label="Permalink to &quot;war&quot;">​</a></h4><p>以<a href="https://github.com/zhaobao1830/foodie-dev" target="_blank" rel="noreferrer">foodie-dev/dev-mybatis-plus</a>为例</p><p>1、在pom.xml(foodie-dev-api)里添加packaging</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packaging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;war&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packaging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2、在pom.xml(foodie-dev)去掉springBoot项目自带的tomcat依赖</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;!-- 打包war [2] 移除自带内置tomcat --&gt;</span></span>
<span class="line"><span>    &lt;exclusions&gt;</span></span>
<span class="line"><span>        &lt;exclusion&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;/exclusion&gt;</span></span>
<span class="line"><span>    &lt;/exclusions&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>3、由于第2步去掉了tomcat依赖，里面的servlet依赖也没有了，在pom.xml(foodie-dev)添加servlet依赖</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 打包war [3] 添加依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;javax.servlet&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;javax.servlet-api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;provided&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>4、新建关于war的依赖类</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.zb;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.boot.builder.SpringApplicationBuilder;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.boot.web.servlet.support.SpringBootServletInitializer;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打包war [4] 增加war的启动类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WarStarterApplication</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpringBootServletInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SpringApplicationBuilder </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SpringApplicationBuilder </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 指向Application这个springboot启动类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Application.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>5、先执行maven里的clean，再执行install，执行成功后，在target文件夹找到生成的war包</p><p><img src="`+l+'" alt="Image text"></p><p><img src="'+a+'" alt="Image text"></p><h2 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h2><h3 id="tomcat" tabindex="-1">tomcat <a class="header-anchor" href="#tomcat" aria-label="Permalink to &quot;tomcat&quot;">​</a></h3><p>1、将上面打包生成的war包放到tomcat的webapps文件下，启动tomcat，就会自动解压</p><p><img src="'+r+'" alt="Image text"></p><p>2、通过端口+项目名字访问对应接口</p><p><img src="'+a+'" alt="Image text"></p>',42),d=[o];function c(k,g,b,E,m,u){return i(),n("div",null,d)}const f=s(h,[["render",c]]);export{v as __pageData,f as default};
